module Type

imports

    Common
    NSID

context-free sorts

    Type
    InterfaceMember

context-free syntax

    Type.TypeString = <String>
    Type.TypeBool = <Bool>
    Type.TypeInt = <Int>
    Type.TypeFloat = <Float>
    Type.TypeRef = <<NSID>>
    Type.TypeResourceRegistry = [$<[NSID]>]
    Type.TypeTag = [#]

    // TODO: think more about this notation
    Type.TypeArrayDynamic = <[<Type>;]>
    Type.TypeArrayFixedAnonymous = <[<Type>; <INT>]>
    Type.TypeArrayFixedNamed = <[<Type>; <{ID ", "}+>]>
    Type.TypeListDynamic = <[<Type>]>
    Type.TypeListFixedAnonymous = <[<Type>: <INT>]>
    Type.TypeListFixedNamed = <[<Type>: <{ID ", "}+>]>
    Type.TypeEnum = <
        enum
        {
            <{ID ",\n"}*>
        }
    >
    Type.TypeInterface = <
        interface
        {
            <{InterfaceMember "\n"}*>
        }
    >
    Type.TypeInterfaceCompose = <
        interface : <{Type ", "}+>
        {
            <{InterfaceMember "\n"}*>
        }
    >

    InterfaceMember.InterfaceMember = <<ID> <Type>>

lexical syntax

    ID = "String" {reject}
    ID = "Bool" {reject}
    ID = "Int" {reject}
    ID = "Float" {reject}
    ID = "enum" {reject}

context-free sorts

    TypeDecl

context-free syntax

    TypeDecl.TypeDecl = <type <ID> <Type>>
