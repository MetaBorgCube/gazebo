module analysis

imports

  statixruntime
  statix/api

  gazebo
  pp
  injections/-

rules // Analysis

  // single-file analysis
//  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics", "programOk")
  
  // multi-file analysis
  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics", "projectOk", "fileOk")

  pre-analyze = explicate-injections-gazebo
  post-analyze = implicate-injections-gazebo
//  pre-analyze(|resource) = explicate-injections-gazebo; gzb-inject-start(|resource)
//  post-analyze           = gzb-eject-start ; implicate-injections-gazebo

  gzb-inject-start(|resource): Start(uses, tlis){anno*} -> StartInject(nsid, uses, tlis){anno*}
    with nsid := <gzb-resource-to-nsid> resource
  gzb-eject-start: StartInject(_, uses, tlis){anno*} -> Start(uses, tlis){anno*}
  gzb-resource-to-nsid: res -> NSIDiFull("myns", ["my", "name"])

rules // Editor Services

  editor-resolve = stx-editor-resolve

  editor-hover = stx-editor-hover

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the pre-analyzed abstract syntax ATerm of a selection.
  debug-show-pre-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"pre-analyzed.aterm")> path
       ; result   := <pre-analyze> selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected
