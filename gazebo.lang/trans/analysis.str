module analysis

imports

  libspoofax/term/origin
  libspoofax/resource/path

  statixruntime
  statix/api

  gazebo
  pp
  injections/-
  signatures/-

rules // Analysis

  editor-analyze = stx-editor-analyze(pre-analyze, post-analyze|"statics", "projectOk", "fileOk")

  pre-analyze = origin-track-forced(explicate-injections-gazebo; norm-str-id; gzb-inject-start)
  post-analyze = origin-track-forced(gzb-eject-start; implicate-injections-gazebo)

  norm-str-id = bottomup(try(norm-str-id-))
  norm-str-id-: FindPathString(e, k) -> FindPath(e, <norm-str-tracked> k)
  norm-str-id-: InterfaceMemberString(name, t) -> InterfaceMember(<norm-str-tracked> name, t)
  norm-str-id-: KeyValueString(k, v) -> KeyValue(<norm-str-tracked> k, v)
  norm-str-id-: NSIDNamePartVerbatim(x) -> NSIDNamePart(x)

  origin-file-path-stem =
      origin-file
    ; current-language-relative-source-path
    ; remove-extension

  resource-path-to-nsid(|res-ident) =
      split-fetch(?res-ident)
    ; ?(nss, names)
    ; !NSIDiFull(<last> nss, names)

  file-path-stem-to-nsid(|res-ident) =
      string-tokenize(?'/')
    ; resource-path-to-nsid(|res-ident)

  gzb-extract-module-nsid =
      origin-file-path-stem
    ; file-path-stem-to-nsid(|"gazebo")

  gzb-inject-start: s@Start(uses, tlis) -> StartInject(nsid, uses, tlis)
    with nsid := <gzb-extract-module-nsid> s
  gzb-inject-start: s -> s

  gzb-eject-start: StartInject(_, uses, tlis) -> Start(uses, tlis)
  gzb-eject-start: s -> s

rules // Editor Services

  editor-resolve = stx-editor-resolve

  editor-hover = stx-editor-hover

rules // Debugging

  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"aterm")> path
       ; result   := selected

  // Prints the pre-analyzed abstract syntax ATerm of a selection.
  debug-show-pre-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"pre-analyzed.aterm")> path
       ; result   := <pre-analyze> selected

  // Prints the analyzed annotated abstract syntax ATerm of a selection.
  debug-show-analyzed: (selected, _, _, path, project-path) -> (filename, result)
    with filename := <guarantee-extension(|"analyzed.aterm")> path
       ; result   := selected
