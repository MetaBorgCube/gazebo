module statics/types

imports

    signatures/NSID-sig
    signatures/Type-sig
    statics/common
    statics/bind/field
    statics/bind/memb
    statics/bind/registry
    statics/type/bounds
    statics/type/enum
    statics/type/interface

signature

    sorts TYPE

    constructors

        // Primitives
        STRING : TYPE
        BOOL : TYPE
        INT : TYPE
        FLOAT : TYPE
        ENUM : scope -> TYPE

        // Basic constructs
        POS : POS_KIND * TYPE -> TYPE
        RANGE : TYPE -> TYPE

        // Specific types
        SELECTOR : scope -> TYPE
        TAG : TYPE
        /** registry */
        RESOURCE : NSIDi -> TYPE
        ITER : TYPE -> TYPE
        VOID : TYPE

        // NBT-related exclusive types
        COMPOUND : scope -> TYPE
        LIST : TYPE -> TYPE
        ARRAY : TYPE -> TYPE

        // Modules
        MOD : scope -> TYPE

        // Function & Lambda
        FUNC : list((ID * TYPE)) * TYPE -> TYPE
        LAMBDA : TYPE

        // Misc
        /** univeral top type, anything is a subtype of UNK */
        UNK : TYPE
        /** universal bottom type, nothing is a subtype of BOTTOM */
        BOTTOM : TYPE
        ENUMKEY : TYPE

    sorts POS_KIND

    constructors

        /** absolute */
        POS_ABS : POS_KIND
        /** relative ("tilde notation") */
        POS_REL : POS_KIND
        /** local ("caret notation") */
        POS_LOC : POS_KIND
        /** any (only orignates from use-site) */
        POS_ANY : POS_KIND

rules

    typeOfType : scope * Type -> TYPE

    typeOfType(_, TypeString()) = STRING().
    typeOfType(_, TypeBool()) = BOOL().
    typeOfType(_, TypeInt()) = INT().
    typeOfType(_, TypeFloat()) = FLOAT().

    typeOfType(s, TypePos(PosAbs(), t)) = POS(POS_ABS(), typeOfType(s, t)).
    typeOfType(s, TypePos(PosRel(), t)) = POS(POS_REL(), typeOfType(s, t)).
    typeOfType(s, TypePos(PosLoc(), t)) = POS(POS_LOC(), typeOfType(s, t)).
    typeOfType(s, TypePos(PosAny(), t)) = POS(POS_ANY(), typeOfType(s, t)).

    typeOfType(_, TypeTag()) = TAG().

    // TODO: distinguish between different array/list fixed types

    typeOfType(s, TypeRef(nsid)) = T :-
        T == resolveMembRef(s, nsidi(nsid), MEMB_TYPE()).

    typeOfType(s, TypeResourceRegistry(id_registry)) = RESOURCE(id_registry_full) :-
        resolveRegistryRel(s, nsidi(id_registry)) == (id_registry_full, _)
        | error $[registry not found]@id_registry,
        @id_registry.ref := id_registry_full.

    typeOfType(s, TypeSelector()) = SELECTOR(s_sel_t) :-
        new s_sel_t.

    typeOfType(s, TypeArrayDynamic(t)) = ARRAY(T) :-
        T == typeOfType(s, t).
    typeOfType(s, TypeArrayFixedAnonymous(t, size)) = ARRAY(T) :-
        T == typeOfType(s, t).
    typeOfType(s, TypeArrayFixedNamed(t, names)) = ARRAY(T) :-
        T == typeOfType(s, t).

    typeOfType(s, TypeListDynamic(t)) = LIST(T) :-
        T == typeOfType(s, t).
    typeOfType(s, TypeListFixedAnonymous(t, size)) = LIST(T) :-
        T == typeOfType(s, t).
    typeOfType(s, TypeListFixedNamed(t, names)) = LIST(T) :-
        T == typeOfType(s, t).

    typeOfType(s, T@TypeEnumUntyped(_)) =
        typeOfEnum(s, T).
    typeOfType(s, T@TypeEnumTyped(_, _)) =
        typeOfEnum(s, T).

    typeOfType(s, TypeInterface(membs)) =
        typeOfInterface(s, membs, []).
    typeOfType(s, TypeInterfaceCompose(bases, membs)) =
        typeOfInterface(s, membs, bases).

    typeOfType(s, TypeBottom()) = BOTTOM().

    typeOfType(_, _) = UNK() :-
        try { false } | note $[todo: other types].

rules

    typeBoolish : TYPE

    typeBoolish(BOOL()).
    typeBoolish(SELECTOR(_)).
    typeBoolish(POS(_, INT())).
    typeBoolish(POS(_, FLOAT())).
    typeBoolish(_) :- false.

rules

    typeNumeric : TYPE

    typeNumeric(INT()).
    typeNumeric(FLOAT()).
    typeNumeric(_) :- false.

rules

    typeComparable : Compare * TYPE * TYPE

    typeComparable(CmpGt(), T, T) :-
        typeNumeric(T).

    typeComparable(CmpGte(), T, T) :-
        typeNumeric(T).

    typeComparable(CmpLt(), T, T) :-
        typeNumeric(T).

    typeComparable(CmpLte(), T, T) :-
        typeNumeric(T).

    typeComparable(CmpEqual(), Tl, Tr) :-
        typeComparableEqual(Tl, Tr).

    typeComparable(CmpNotEqual(), Tl, Tr) :-
        // not equal is just a boolean inversion,
        // so same rules hold as for being CmpEqual()-comparable
        typeComparableEqual(Tl, Tr).

    typeComparable(CmpEquiv(), Tl, Tr) :-
        false | error $[reserved operator for future use].

    typeComparable(CmpIs(), SELECTOR(_), STRING()).
    typeComparable(CmpIs(), POS(_, Tpos), RESOURCE(NSIDiFull("minecraft", ["block"]))) :-
        typeNumeric(Tpos).

    typeComparable(CmpMatches(), T, RANGE(T)).

rules

    typeComparableEqual : TYPE * TYPE
    typeComparableEqual(STRING(), STRING()).
    typeComparableEqual(BOOL(), BOOL()).
    typeComparableEqual(INT(), INT()).
    typeComparableEqual(FLOAT(), FLOAT()).
    typeComparableEqual(ENUM(s_en), ENUM(s_en)).
    typeComparableEqual(POS(_, Tl), POS(_, Tr)) :-
        typeComparableEqual(Tl, Tr).
    typeComparableEqual(RANGE(Tl), RANGE(Tr)) :-
        typeComparableEqual(Tl, Tr).
    typeComparableEqual(RESOURCE(reg), RESOURCE(reg)).
    typeComparableEqual(COMPOUND(_), COMPOUND(_)).
    typeComparableEqual(LIST(Tl), LIST(Tr)) :-
        typeComparableEqual(Tl, Tr).
    typeComparableEqual(ARRAY(Tl), ARRAY(Tr)) :-
        typeComparableEqual(Tl, Tr).

rules

    /** resolves to UNK if type is not iterable */
    typeUnwrapIter : TYPE -> TYPE
    typeUnwrapIter(ITER(T)) = T.
    typeUnwrapIter(LIST(T)) = T.
    typeUnwrapIter(ARRAY(T)) = T.
    typeUnwrapIter(RANGE(T)) = T.
    typeUnwrapIter(T) = UNK().

rules

    destructType : TYPE -> list(TYPE)
    destructType(POS(POS_ABS(), T)) = [T, T, T].
    destructType(t) = [] :- false | error $[cannot destruct type [t]].
