module statics/expr/tag-resource

imports

    statics/common
    statics/bind/registry
    statics/bind/registration
    statics/bind/regmeta
    statics/bind/bs
    statics/expr
    statics/expr/nbt
    statics/type/bounds

rules // tag

    typeOfTag : scope * Tag -> TYPE

    typeOfTag(s, Tag(_)) = TAG().

rules // resource

    typeOfResource : scope * Resource -> TYPE

    typeOfResource(s, ResourceBare(ident)) =
        typeOfResource(s, ResourceFull(ident, Props([]), NBTCompound([]))).

    typeOfResource(s, ResourceProps(ident, props)) =
        typeOfResource(s, ResourceFull(ident, props, NBTCompound([]))).

    typeOfResource(s, ResourceNBT(ident, payl)) =
        typeOfResource(s, ResourceFull(ident, Props([]), payl)).

    typeOfResource(s, ResourceFull(ident, Props(props), payl)) = T :- {id_registry s_registry id_registration s_registration}
        inferRegistry(s, ident) == ((id_registry, s_registry), (id_registration, s_registration)),
        T == RESOURCE(id_registry),
        resourcePropsOk(s, s_registration, props),
        resourcePaylOk(s, s_registration, payl).

rules

    inferRegistry : scope * TRIdent -> ((NSID * scope) * (NSID * scope))

    inferRegistry(s, TRIdentExplicit(id_registry, id_registration)) = ((id_registry_full, s_registry), (id_registration_full, s_registration)) :-
        resolveRegistryRel(s, id_registry) == (id_registry_full, s_registry)
        | error $[registry not found]@id_registry,
        @id_registry.ref := id_registry_full,
        resolveRegistration(s_registry, id_registration) == (id_registration_full, s_registration)
        | error $[registration not found in registry]@id_registration,
        @id_registration.ref := id_registration_full.

    inferRegistry(s, TRIdentAnonymous(id_registration)) =
        res@resolveRegistryAndRegistrationFromAllRegistries(s, allRegistries(s), id_registration) :- {registration}
        res == ((_, _), (registration, _)),
        @id_registration.ref := registration.

rules

    resourcePropsOk maps resourcePropOk(*, *, list(*))
    resourcePropOk : scope * scope * Prop
    resourcePropOk(s, s_reg, KvProp(k, v)) :- {s_bss k' Tbs Te}
        // TODO: disallow repeat keys
        s_bss == resolveRegmeta(s_reg, "block_states") | error $[resource does not define any block states],
        (k', Tbs) == resolveBlockState(s_bss, k) | error $[undefined block state for this resource]@k,
        @k.ref := k',
        Te == typeOfExpr(withTypeInject(s, Tbs), v),
        subtype(Te, Tbs) | error $[value not assignable to blocks state with value type [Tbs]]@v.
    resourcePropOk(_, _, prop) :-
        false | error $[property type not supported]@prop.

rules

    resourcePaylOk : scope * scope * NBTCompound
    resourcePaylOk(_, _, NBTCompound([])).
    resourcePaylOk(s, s_reg, nbt) :- {s_data Tdata Tnbt}
        s_data == resolveRegmeta(s_reg, "data") | error $[resource does not define any data type],
        Tnbt == typeOfNBTCompound(s, nbt, Tdata@COMPOUND(s_data)),
        subtype(Tnbt, Tdata) | error $[payload not compatible with the defined data schema for this resource]@nbt.
