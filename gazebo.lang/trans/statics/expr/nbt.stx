module statics/expr/nbt

imports

    statics/common
    statics/expr
    statics/bind/field
    statics/type/bounds
    statics/types

rules

    /** scope * NBT * hint type */
    typeOfNBT : scope * NBT * TYPE -> TYPE

    typeOfNBT(s, NBTCompound2NBT(compound), hint) = typeOfNBTCompound(s, compound, hint).
    typeOfNBT(s, NBTArray2NBT(array), hint) = typeOfNBTArray(s, array, hint).
    typeOfNBT(s, NBTList2NBT(list), hint) = typeOfNBTList(s, list, hint).

rules

    /** create a list of either 1 or 0 elements containing a compound hint scope from a hint type */
    extractCompoundTypeHint : TYPE -> list(scope)
    extractCompoundTypeHint(COMPOUND(s_comp)) = [s_comp].
    extractCompoundTypeHint(UNK()) = [].
    extractCompoundTypeHint(_) = [] :-
        false | error $[incompatible with constructor type hint].

rules

    typeOfNBTCompound : scope * NBTCompound * TYPE -> TYPE

    typeOfNBTCompound(s, NBTCompound(kvs), Thint) = COMPOUND(s_derived) :- {ss_hint}
        ss_hint == extractCompoundTypeHint(Thint),
        new s_derived,
        nbtCompoundKvsOk(s, s_derived, ss_hint, kvs).

    nbtCompoundKvsOk maps nbtCompoundKvOk(*, *, *, list(*))
    /** origin scope * compound derivation scope * 1-or-0 (optional) compound hint scope * kv entry */
    nbtCompoundKvOk : scope * scope * list(scope) * NBTKeyValue

    nbtCompoundKvOk(s, s_comp, [], KeyValueID(key, value)) :- {T}
        T == typeOfExpr(s, value),
        declareField(s_comp, key, T).

    nbtCompoundKvOk(s, s_comp, [s_hint], KeyValueID(key, value)) :- {T Thint name_hint}
        (name_hint, Thint) == resolveField(s_hint, key) | error $[unhinted key]@key,
        T == typeOfExpr(withTypeInject(s, Thint), value),
        declareField(s_comp, key, T),
        @key.ref := name_hint.

    nbtCompoundKvOk(s, s_comp, [], KeyValueString(key, value)) :- {T}
        // TODO: get 'key' without the quotes
        T == typeOfExpr(s, value),
        declareField(s_comp, key, T).

    nbtCompoundKvOk(s, s_comp, [s_hint], KeyValueString(key, value)) :- {T Thint name_hint}
        // TODO: get 'key' without the quotes
        (name_hint, Thint) == resolveField(s_hint, key) | error $[unhinted key]@key,
        T == typeOfExpr(withTypeInject(s, Thint), value),
        declareField(s_comp, key, T),
        @key.ref := name_hint.

rules

    extractIterableTypeHint_array : TYPE -> TYPE
    extractIterableTypeHint_array(ARRAY(T)) = T.
    extractIterableTypeHint_array(UNK()) = UNK().
    extractIterableTypeHint_array(_) = UNK() :-
        false | error $[incompatible with constructor type hint].

    extractIterableTypeHint_list : TYPE -> TYPE
    extractIterableTypeHint_list(LIST(T)) = T.
    extractIterableTypeHint_list(UNK()) = UNK().
    extractIterableTypeHint_list(_) = UNK() :-
        false | error $[incompatible with constructor type hint].

rules

    typeOfNBTArray : scope * NBTArray * TYPE -> TYPE

    typeOfNBTArray(s, NBTArrayAnonymous(values), Thint) = ARRAY(T) :-
        T == typeOfNBTIterable(s, values, extractIterableTypeHint_array(Thint), extractIterableTypeHint_array(Thint)).

    typeOfNBTArray(s, NBTArrayExplicit(t, values), Thint) = ARRAY(T) :- {Tarr}
        T == typeOfType(s, t),
        Tarr == typeOfNBTIterable(s, values, T, extractIterableTypeHint_array(Thint)),
        subtype(ARRAY(T), Thint) | error $[array type is not compatible with required type]@values.

rules

    typeOfNBTList : scope * NBTList * TYPE -> TYPE

    typeOfNBTList(s, NBTList(values), Thint) = LIST(T) :-
        T == typeOfNBTIterable(s, values, extractIterableTypeHint_list(Thint), extractIterableTypeHint_list(Thint)).

rules

    /** scope * values * lower bound * current upper bound -> final element type */
    typeOfNBTIterable : scope * list(Expr) * TYPE * TYPE -> TYPE

    typeOfNBTIterable(s, [], _, b_upper) = b_upper.

    typeOfNBTIterable(s, [x|xs], b_lower, b_upper) = lub(b_upper, Ttail) :- {T}
        T == typeOfExpr(withTypeInject(s, b_lower), x),
        Ttail == typeOfNBTIterable(s, xs, b_lower, lub(b_upper, T)),
        subtype(T, b_lower) | error $[element type is not compatible with required type]@x.
