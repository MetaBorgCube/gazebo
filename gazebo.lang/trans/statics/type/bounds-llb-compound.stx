module statics/type/bounds-llb-compound

imports

    statics/common
    statics/bind/field
    statics/type/interface
    statics/type/bounds

rules

    llbCompound : list(scope) -> scope
    llbCompound([]) = s_llbc_anon :- new s_llbc_anon.
    llbCompound([s]) = s.
    llbCompound(ss) = s_llbc :- {shadowEnv}
        new s_llbc,
        /* base scopes can be safely linked without having to worry about duplicate names at the same level,
           because s_llbc will shadow everything with the corresponding LLB,
           so this linking is basically only for reference purposes */
        linkBaseScopes(s_llbc, ss),
        shadowEnv == llbCompoundUnion([], ss),
        declareFields(s_llbc, shadowEnv).

rules

    llbCompoundUnion : list((string * TYPE)) * list(scope) -> list((string * TYPE))
    llbCompoundUnion(E, []) = E.
    llbCompoundUnion(E, [s_curr|sxs]) = llbCompoundUnion(E', sxs) :- {Ecurr}
        Ecurr == extractEnv(queryAllFields(s_curr)),
        E' == unionEnv(E, Ecurr).

    extractEnv maps extractEnvEntry(list(*)) = list(*)
    extractEnvEntry : (path * (string * TYPE)) -> (string * TYPE)
    extractEnvEntry((_, entry)) = entry.

rules

    /** LLB all left items with a right item, add all 'remaining' right items unconditionally */
    unionEnv : list((string * TYPE)) * list((string * TYPE)) -> list((string * TYPE))
    unionEnv(El, []) = El.
    unionEnv([], Er) = Er.
    unionEnv(El@[(name, Tl)|El'], Er) = [(name/*preserves ref order*/, Tllb) | unionEnv(El', Er')] :- {Tr}
        Tr == unionEnv_lookup(name, Er),
        Tllb == llb(Tl, Tr),
        try { Tllb != BOTTOM() } | error $[at least two base interfaces have conflicting fields (compound union produces unassignable type)],
        Er' == unionEnv_del(name, Er).

    unionEnv_lookup : string * list((string * TYPE)) -> TYPE
    unionEnv_lookup(_, []) = UNK().
    unionEnv_lookup(name, [(name, T)|_]) = T.
    unionEnv_lookup(name, [_|xs]) = unionEnv_lookup(name, xs).

    unionEnv_del : string * list((string * TYPE)) -> list((string * TYPE))
    unionEnv_del(_, []) = [].
    unionEnv_del(name, [(name, _)|xs]) = unionEnv_del(name, xs).
    unionEnv_del(name, [x|xs]) = [x|unionEnv_del(name, xs)].
