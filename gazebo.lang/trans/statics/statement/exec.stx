module statics/statement/exec

imports

    statics/common
    statics/statement/block
    statics/expr
    statics/types

rules // entry point

    execOk : scope * Exec

    execOk(s, ExecFin(frag, body)) :- {s_exec_body}
        execFragOk(s, frag),
        new s_exec_body, s_exec_body -P-> s,
        blockOk(s_exec_body, body).

    execOk(s, ExecChain(frag, next)) :-
        // exec chain is typed just like a single-statement body
        execOk(s, ExecFin(frag, SingleStmt(Exec2Statement(next)))).

rules // fragments

    execFragOk : scope * ExecFrag

    execFragOk(s, ExecAlign(e)) :- {T}
        typeOfExpr(s, e) == STRING() | error $[expected string]@e.

    execFragOk(s, ExecAnchored(a)).

    execFragOk(s, ExecAs(t)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

    execFragOk(s, ExecAt(t)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

    execFragOk(s, ExecFacingPos(p)) :- {T}
        typeOfExpr(s, p) == T,
        matchExecPosType(T) | error $[expected position, instead got [T]]@p.

    execFragOk(s, ExecFacingEntity(t, a)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

    execFragOk(s, ExecIn(dim)) :- {T Tdim}
        Tdim == RESOURCE(nsid("minecraft", ["dimension"])),
        typeOfExpr(withTypeInject(s, Tdim), dim) == Tdim | error $[not a dimension]@dim.

    execFragOk(s, ExecPositionedPos(p)) :- {T}
        typeOfExpr(s, p) == T,
        matchExecPosType(T) | error $[expected position, instead got [T]]@p.

    execFragOk(s, ExecPositionedAs(t)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

    execFragOk(s, ExecRotatedAbs(r)) :- {T}
        typeOfExpr(s, r) == T,
        typeNumeric(T) | error $[expected numeric value, but instead [T]]@r.

    execFragOk(s, ExecRotatedRel(r)) :- {T}
        typeOfExpr(s, r) == T,
        typeNumeric(T) | error $[expected numeric value, but instead [T]]@r.

    execFragOk(s, ExecRotatedAs(t)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

rules

    matchExecPosType : TYPE
    matchExecPosType(POS(_, T)) :- typeNumeric(T).
    matchExecPosType(_) :- false.
