module statics/bind/memb

imports

    statics/common
    statics/bind/mod

rules

// FIXME: seems to cause the Statix solver to get in an infinite loop
//    declareMembs : scope * list((ID * TYPE))
//
//    declareMembs(s, [(name, T) | xs]) :-
//        declareMemb(s, name, T),
//        declareMembs(s, xs).

    declareMemb : scope * ID * MEMB_KIND * TYPE

    declareMemb(s, name, kind, T) :-
        // TODO: add information about mutability and other access modifiers of the member
        !memb[(name, kind), T] in s,
        queryMemb(s, name, kind) == [(_, (_, _))] | error $[duplicate definition]@name.

rules

    queryMembLocal : scope * ID * MEMB_KIND -> list((path * ((ID * MEMB_KIND) * TYPE)))

    queryMembLocal(s, name, kind) = p :-
        query memb
            filter P* and { x :- x == (name, kind) }
            min $ < P and false
            in s |-> p.

rules

    queryAllMembLocal : scope * MEMB_KIND -> list((path * ((ID * MEMB_KIND) * TYPE)))

    queryAllMembLocal(s, kind) = p :-
        query memb
            filter P* and { x :- x == (_, kind) }
            min $ < P and false
            in s |-> p.

rules

    queryMemb : scope * ID * MEMB_KIND -> list((path * ((ID * MEMB_KIND) * TYPE)))

    queryMemb(s, name, kind) = p :-
        query memb
            filter P* I? M? and { x :- x == (name, kind) }
            min $ < P, $ < M and false
            in s |-> p.

rules

    matchMemb : list((path * ((ID * MEMB_KIND) * TYPE))) -> (ID * TYPE)
    matchMemb([(_, ((name', _), T))|_]) = (name', T).
    matchMemb(_) = ("$unmatched", UNK()) :- false.

rules

    resolveMemb : scope * ID * MEMB_KIND -> TYPE

    resolveMemb(s, name, kind) = T :- {p name'}
        queryMemb(s, name, kind) == p,
        (name', T) == matchMemb(p),
        @name.ref := name',
        @name.type := T.

rules

    resolveMembLocal : scope * ID * MEMB_KIND -> TYPE

    resolveMembLocal(s, name, kind) = T :- {p name'}
        queryMembLocal(s, name, kind) == p,
        (name', T) == matchMemb(p),
        @name.ref := name',
        @name.type := T.

rules

    resolveMembRef : scope * NSIDi * MEMB_KIND -> TYPE

    // overload to account for syntactic sugar
    resolveMembRef(s, NSIDiShort(name), kind) = resolveMembRef(s, NSIDiFull(curr_ns, name), kind) :-
        currentMod(s) == (NSIDiFull(curr_ns, _), _).

    // case: relative NSID with 1 name element
    // simplest rule
    resolveMembRef(s, nsid@NSIDiRel([name]), kind) = T :-
        T == resolveMemb(s, name, kind) | error $[no member found with name [name]]@nsid.

    // case: relative NSID with 2 name elements
    // name part of this NSIDRel should be at least of length 2, because earlier rule captures 1-length
    resolveMembRef(s, nsid@NSIDiRel([name_mod, name_memb]), kind) = Tmemb :- {Tmod s_mod}
        Tmod == resolveMemb(s, name_mod, kind),
        Tmod == MOD(s_mod),
        Tmemb == resolveMemb(s_mod, name_memb, kind) | error $[[name_memb] is not a member of module [name_mod]]@name_memb.

    // case: absolute NSID with 2 or more name elements
    resolveMembRef(s, nsid@NSIDiFull(ns, name), kind) = Tmemb :- {nsid_init Tmod s_mod}
        nsid_init == NSIDiFull(ns, stringListInit(name)),
        Tmod == resolveMod(s, nsid_init),
        Tmod == MOD(s_mod),
        Tmemb == resolveMemb(s_mod, stringListLast(name), kind).

    resolveMembRef(s, nsid, _) = UNK() :-
        false | error $[don't know how to resolve reference]@nsid.
