language llmc
module syntax/full-functions

test example 1 [[[[
function example:path/to/count_items_in_container

/* Surface code:
func count_items_in_container(const container `~Int, const item_id $<item>) -> Int
{
    mut sum := 0
    for item <- container.Items[{id: item_id}] =>
        sum += item.Count
    return sum
}
*/

global

sign
    .const container p[~iI]
    .const item_id r[minecraft:item]
    _ret iI

local
    sum iB
    item c[id r[minecraft:item], Count iI]
    _filter0 c[id r[minecraft:item]]
    _iter0_subj c[Items l[c[id r[minecraft:item], Count iI]]]
    _iter0_subj_len iI
    _iter0_flag b
    _iter0_v c[id r[minecraft:item], Count iI]
    _scratch0 iI

body
    {
        // local variable init
        sum <- 0I
        // filter cond init
        _filter0 <- c[id item_id]
        // loop init
        _iter0_subj <- getbe container 'Items[(_filter0)]'
        _iter0_subj_len <- 0I
        _iter0_flag <- true
    }
    loop _iter0_flag {
        {
            // loop condition evaluation
            _iter0_subj_len <- count _iter0_subj
            _iter0_flag <- gt 0I _iter0_subj_len
        } 
        if _iter0_flag {
            _iter0_v <- popl _iter0_subj
            item <- _iter0_v
            _sratch0 <- find item 'Count'
            sum <- add sum _scatch0
        }
    }
    {
        _ret <- sum
    }
]]]] parse succeeds
