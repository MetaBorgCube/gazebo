module str_common 

imports

  libspoofax/-

  libstratego-gpp
  libstratego-lib

rules

  get-filename: s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s
    ; s' := <last> names

  get-dir(|path): s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s
    ; names' := <at-last(![])> names
    ; if [h | tl] := names' then
        s' := <concat-strings> [path, "/",  <separate-by(|"/"); concat-strings> names']
      else
        s' := path
      end

  get-src-gen(|project-path, folder, ext):
    filename -> filename'
    with
      fn := <get-filename> filename
    ; src-gen-path := <concat-strings> [project-path, "/src-gen"]
    ; src-gen-folder := <concat-strings> [src-gen-path, "/" ,folder]
    ; file-folder := <get-dir(|src-gen-folder)> filename
    ; filename' := <concat-strings> [file-folder, "/" , fn, ext]

strategies

  /** opt-map(T -> U) :: Option(T) -> Option(U) */
  opt-map(s) = None() <+ Some(s)

  /** opt-unwrap :: Option(T) -> T */
  opt-unwrap = ?Some(<id>)

  /** opt-unwrap(_ -> T) :: Option(T) -> T */
  opt-unwrap(fallback) =
    ?None(); fallback
  <+ ?Some(<id>)

rules // intersperse(|sep:T) :: List(U) -> List(T|U)

  intersperse(|sep) : [] -> []
  intersperse(|sep) : [x] -> [x]
  intersperse(|sep) : [x|xs] -> [x, sep | <intersperse(|sep)> xs]

rules // enumerate-map(s) :: List(T) -> List(U) ; s :: (int, T) -> U

  enumerate-map(s) =
    !(<length; range>, <id>)
  ; zip
  ; map(s)

rules // enumerate-map-intersperse(s|sep:V=", ") :: List(T) -> List(U|V) ; s :: (int, T) -> U

  enumerate-map-intersperse(s) = enumerate-map-intersperse(s|", ")
  enumerate-map-intersperse(s|sep) =
    enumerate-map(s)
  ; intersperse(|sep)

strategies // count-topdown(s|initial:int=0) :: term -> term' ; s :: (term, int) -> term'

  /**
   * Traverse the given term in top-down fashion,
   * including a counter which is incremented each time the given
   * strategy is successfully executed.
   *
   * TODO: review performance and verify correctness
   */

  count-topdown(s) = count-topdown(s|0)
  count-topdown(s|initial) =
    !(<id>, initial)
  ; rec x(
      // deconstruct tuple's fst into a list of subterms
      (?_#(<id>), id)
      // apply the strategy and increment the counter if successful
      // then immediately continue depth-first
    ; thread-map(
        try(\(term, idx) -> (<s> (term, idx), <inc> idx)\)
      ; x
      )
    )
  ; Fst

rules // make-set(eq) :: List(T) -> List(T)

  make-set(eq) =
    // copied from standard library, but with additional custom equality
    foldr(![], union(eq), ![<id>])

strategies

  string-norm = un-double-quote; unescape
  string-denorm = escape; double-quote

strategies // is-distinct :: List(_) -> id|fail

  /** check if all elements in the given list/set are distinct */
  is-distinct = where(
    !(<length>, <make-set; length>)
  ; eq
  )
