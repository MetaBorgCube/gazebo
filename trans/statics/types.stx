module statics/types

imports

    signatures/NSID-sig

signature

    sorts TYPE

    constructors

        // Primitives
        STRING : TYPE
        BOOL : TYPE
        INT : TYPE
        FLOAT : TYPE

        // Basic constructs
        VEC : list(TYPE) -> TYPE
        RANGE : TYPE -> TYPE

        // Specific types
        SELECTOR : scope -> TYPE
        TAG : TYPE
        /** registry */
        RESOURCE : NSID -> TYPE
        ITER : TYPE -> TYPE
        VOID : TYPE

        // NBT-related exclusive types
        COMPOUND : TYPE
        LIST : TYPE -> TYPE
        ARRAY : TYPE -> TYPE

        // Misc
        UNK : TYPE

        // Modules
        MOD : scope -> TYPE

        // Lambda
        LAMBDA : TYPE

        // Members (constants, variables, functions)
        CONST : TYPE
        VAR : TYPE
        FUNC : list(TYPE) * TYPE -> TYPE

rules

    typeBoolish : TYPE

    typeBoolish(BOOL()).
    typeBoolish(SELECTOR(_)).
    // TODO: VEC(3) only boolish if int/tilde
    typeBoolish(VEC([_, _, _])).
    typeBoolish(_) :- false.

rules

    /** resolves to UNK if type is not iterable */
    typeUnwrapIter : TYPE -> TYPE
    typeUnwrapIter(ITER(T)) = T.
    typeUnwrapIter(LIST(T)) = T.
    typeUnwrapIter(ARRAY(T)) = T.
    typeUnwrapIter(T) = UNK().

rules

    destructType : TYPE -> list(TYPE)
    destructType(VEC(elems)) = elems.
    destructType(t) = [] :- false | error $[cannot destruct type [t]].
