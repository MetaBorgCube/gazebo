module statics/use

imports

    statics/common
    statics/bind/mod
    statics/bind/memb

rules

    usesOk maps useOk(*, list(*))
    useOk : scope * Use

    useOk(s, Use(nsid)) :- {name nameLast}
        NSIDName(name) == nsidName(nsid),
        nameLast == stringListLast(name),
        useOk(s, UseAs(nsid, nameLast)).

    useOk(s, UseAs(nsid, as)) :- {T s_mod}
        resolveModRel(s, nsid) == T@MOD(s_mod) | error $[not a valid module: [T]]@nsid,
        s != s_mod | error $[can't import self]@nsid,
        // TODO: might want to add some metadata to the member declaration that it has been imported
        declareMemb(s, as, T).

    useOk(s, UseFrom(nsid, froms)) :- {T s_mod}
        resolveModRel(s, nsid) == T@MOD(s_mod) | error $[not a valid module: [T]]@nsid,
        s != s_mod | error $[can't import self]@nsid,
        useFromsOk(s, s_mod, froms).

    useOk(s, UseFromStar(nsid)) :- {T s_mod}
        resolveModRel(s, nsid) == T@MOD(s_mod) | error $[not a valid module: [T]]@nsid,
        s != s_mod | error $[can't import self]@nsid,
        // add an import edge to make all (visible) members visible to the current scope
        s -I-> s_mod.

rules

    useFromsOk maps useFromOk(*, *, list(*))
    useFromOk : scope * scope * UseFromPart

    useFromOk(s, s_mod, UseFromPartRegular(id)) :-
        useFromOk(s, s_mod, UseFromPartAlias(id, id)).

    useFromOk(s, s_mod, UseFromPartAlias(id, as)) :- {T}
        resolveMembLocal(s_mod, id) == T | error $[member [id] not found in module]@id,
        // TODO: might want to add some metadata to the member declaration that it has been imported
        declareMemb(s, as, T),
        @as.type := T.
