module statics/bind/registry

imports

    statics/common

rules

    /** root scope * registry name * registry scope */
    declareRegistry : scope * NSIDi * scope

    declareRegistry(s_root, nsid, s_reg) :-
        !registry[nsid, s_reg] in s_root,
        queryRegistry(s_root, nsid) == [(_, (_, _))] | error $[duplicate definition]@nsid.

rules

    queryRegistry : scope * NSIDi -> list((path * (NSIDi * scope)))

    queryRegistry(s, name) = p :-
        query registry
            filter P* M? and { x :- x == name }
            min and false
            in s |-> p.

rules

    queryAllRegistries : scope -> list((path * (NSIDi * scope)))

    queryAllRegistries(s) = p :-
        query registry
            filter P* M? and true
            min and false
            in s |-> p.

rules

    allRegistries : scope -> list((NSIDi * scope))

    allRegistries(s) = allRegistries_map(queryAllRegistries(s)).

    allRegistries_map : list((path * (NSIDi * scope))) -> list((NSIDi * scope))
    allRegistries_map([]) = [].
    allRegistries_map([(_, (name, s)) | tail]) = [(name, s) | allRegistries_map(tail)].

rules

    concatQueryRegistryRes : list((path * (NSIDi * scope))) * list((path * (NSIDi * scope))) -> list((path * (NSIDi * scope)))
    concatQueryRegistryRes([], r) = r.
    concatQueryRegistryRes([x|xs], r) = [x | concatQueryRegistryRes(xs, r)].

    flattenQueryRegistryRes : list(list((path * (NSIDi * scope)))) -> list((path * (NSIDi * scope)))
    flattenQueryRegistryRes([]) = [].
    flattenQueryRegistryRes([x]) = x.
    flattenQueryRegistryRes([x|xs]) = concatQueryRegistryRes(x, flattenQueryRegistryRes(xs)).

rules

    /**
     * Allow absolute NSIDis and short NSIDis (explicitly relative to the current namespace),
     * but disallow any relative NSIDi.
     * In the latter case the corresponding NSIDi is an absolute NSIDi,
     * but with the namespace part set to "$illegal", causing it to be not found,
     * giving room for other query results.
     */
    intern_prepRegistryNSIDi : NSIDi -> NSIDi
    intern_prepRegistryNSIDi(NSIDiRel(name)) = NSIDiFull("$illegal", name).
    intern_prepRegistryNSIDi(nsid) = nsid.

rules

    /**
     * Resolve a registry relative to the current module.
     * If the given NSIDi is absolute, this function does not add any functionality.
     * Any scope which has some path to the root scope suffices.
     * A resolve is also attempted to the implicit namespaces.
     */
    resolveRegistryRel : scope * NSIDi -> (NSIDi * scope)

    resolveRegistryRel(s, nsid) = (id_reg, s_reg) :- {curr abs imMc imGzb qcomb p'}
        // relativize the specified NSIDi to the namespace of the current module
        currentMod(s) == (curr, _),
        abs == absolute(intern_prepRegistryNSIDi(nsid), curr),

        // prep implicit
        imMc == absolute(nsid, NSIDiFull("minecraft", [])),
        imGzb == absolute(nsid, NSIDiFull("gzb", [])),

        // resolve in order
        qcomb == flattenQueryRegistryRes([
            queryRegistry(s, abs),
            queryRegistry(s, imMc),
            queryRegistry(s, imGzb)
        ]),

        // take head if exists, so respecting search order
        qcomb == [(p', (id_reg, s_reg)) | _].
