module statics/bind/mod

imports

    statics/common

rules

    declareMod : scope * NSIDi * TYPE

    declareMod(s, name, T) :-
        !mod[name, T] in s,
        queryMod(s, name) == [(_, (_, _))] | error $[duplicate module, only allowed once]@name.

rules

    queryMod : scope * NSIDi -> list((path * (NSIDi * TYPE)))

    queryMod(s, name) = p :-
        query mod
            filter e | (P* M) and { x :- x == name }
            min and false
            in s |-> p.

rules

    concatQueryModRes : list((path * (NSIDi * TYPE))) * list((path * (NSIDi * TYPE))) -> list((path * (NSIDi * TYPE)))
    concatQueryModRes([], r) = r.
    concatQueryModRes([x|xs], r) = [x | concatQueryModRes(xs, r)].

    flattenQueryModRes : list(list((path * (NSIDi * TYPE)))) -> list((path * (NSIDi * TYPE)))
    flattenQueryModRes([]) = [].
    flattenQueryModRes([x]) = x.
    flattenQueryModRes([x|xs]) = concatQueryModRes(x, flattenQueryModRes(xs)).

rules

    resolveMod : scope * NSIDi -> TYPE

    resolveMod(s, name) = T :- {p p'}
        queryMod(s, name) == p,
        p == [(p', (_, T))] | error $[module [name] not resolved],
        T == MOD(_).

rules

    /**
     * Resolve a module relative to the current module.
     * If the given NSID is absolute, this function does not add any functionality.
     * Any scope which has some path to the root scope suffices.
     * A resolve is also attempted to the implicit namespaces.
     */
    resolveModRel : scope * NSIDi -> TYPE

    resolveModRel(s, nsid) = T :- {curr abs imMc imGzb qcomb p'}
        // relativize the specified NSID to the current module
        currentMod(s) == (curr, _),
        abs == absolute(nsid, curr),

        // prep implicit
        imMc == absolute(nsid, NSIDiFull("minecraft", [])),
        imGzb == absolute(nsid, NSIDiFull("gzb", [])),

        // resolve in order
        qcomb == flattenQueryModRes([
            queryMod(s, abs),
            queryMod(s, imMc),
            queryMod(s, imGzb)
        ]),

        // take head if exists, so respecting search order
        qcomb == [(p', (_, T@MOD(_))) | _].
