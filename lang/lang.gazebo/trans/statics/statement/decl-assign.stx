module statics/statement/decl-assign

imports

    statics/common
    statics/expr
    statics/expr/arith
    statics/bind/memb
    statics/types
    statics/type/bounds

rules // decl

    declOk : scope * Decl

    declOk(s, Decl(modifiers, name, e)) :- {T}
        typeOfExpr(s, e) == T,
        declareMemb(s, name, MEMB_MODVARFN(), T),
        @name.type := T.

rules // assign

    assignOk : scope * Assign

    assignOk(s, AssignEq(dst, src)) :- {Td Ts}
        typeOfExpr(s, dst) == Td,
        typeOfExpr(withTypeInject(s, Td), src) == Ts,
        subtype(Ts, Td) | error $[[Ts] is not assignable to [Td]]@src.

    assignOk(s, AssignAdd(dst, src)) :-
        assignOk_i(s, dst, src).

    assignOk(s, AssignSub(dst, src)) :-
        assignOk_i(s, dst, src).

    assignOk(s, AssignMul(dst, src)) :-
        assignOk_i(s, dst, src).

    assignOk(s, AssignDiv(dst, src)) :-
        assignOk_i(s, dst, src).

    assignOk(s, AssignMod(dst, src)) :-
        assignOk_i(s, dst, src).

rules

    assignOk_i : scope * Expr * Expr

    assignOk_i(s, dst, src) :- {Td Ts Tarith}
        typeOfExpr(s, dst) == Td,
        typeOfExpr(withTypeInject(s, Td), src) == Ts,
        Tarith == typeOfArithGeneral(Td, Ts),
        subtype(Tarith, Td).
