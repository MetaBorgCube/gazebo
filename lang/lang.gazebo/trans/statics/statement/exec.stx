module statics/statement/exec

imports

    statics/common
    statics/bind/sender_selector
    statics/statement/block
    statics/expr
    statics/types

rules // entry point

    execOk : scope * Exec

    execOk(s, ExecFin(frag, body)) :- {s_exec_body}
        new s_exec_body, s_exec_body -P-> s,
        execFragOk(s, s_exec_body, frag),
        blockOk(s_exec_body, body).

    execOk(s, ExecChain(frag, next)) :-
        // exec chain is typed just like a single-statement body
        execOk(s, ExecFin(frag, SingleStmt(Exec2Statement(next)))).

rules // fragments

    execFragOk : scope * scope * ExecFrag

    execFragOk(s, _, ExecAlign(e)) :- {T}
        typeOfExpr(s, e) == STRING() | error $[expected string]@e.

    execFragOk(s, _, ExecAnchored(a)).

    execFragOk(s, s_exec_body, ExecAs(t)) :- {T s_sel}
        typeOfExpr(s, t) == T@SELECTOR(s_sel) | error $[target is not a selector, but instead [T]]@t,
        declareSenderSelector(s_exec_body, s_sel).

    execFragOk(s, _, ExecAt(t)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

    execFragOk(s, _, ExecFacingPos(p)) :- {T}
        typeOfExpr(s, p) == T,
        matchExecPosType(T) | error $[expected position, instead got [T]]@p.

    execFragOk(s, _, ExecFacingEntity(t, a)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

    execFragOk(s, _, ExecIn(dim)) :- {T Tdim}
        Tdim == RESOURCE(NSIDiFull("minecraft", ["dimension"])),
        typeOfExpr(withTypeInject(s, Tdim), dim) == Tdim | error $[not a dimension]@dim.

    execFragOk(s, _, ExecPositionedPos(p)) :- {T}
        typeOfExpr(s, p) == T,
        matchExecPosType(T) | error $[expected position, instead got [T]]@p.

    execFragOk(s, _, ExecPositionedAs(t)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

    execFragOk(s, _, ExecRotated(rot)) :-
        rotationOk(s, rot).

    execFragOk(s, _, ExecRotatedAs(t)) :- {T}
        typeOfExpr(s, t) == T@SELECTOR(_) | error $[target is not a selector, but instead [T]]@t.

rules

    rotationOk : scope * Rotation
    rotationOk(s, Rotation(yaw, pitch)) :-
        rotationElementOk(s, yaw),
        rotationElementOk(s, pitch).

    rotationElementOk : scope * RotationElement
    rotationElementOk(s, RotAbs(e)) :-
        rotationElementOk_(s, e).
    rotationElementOk(s, RotRel(e)) :-
        rotationElementOk_(s, e).

    rotationElementOk_ : scope * Expr
    rotationElementOk_(s, e) :- {T}
        typeOfExpr(s, e) == T,
        typeNumeric(T) | error $[expected numeric value, but instead got [T]]@e.

rules

    matchExecPosType : TYPE
    matchExecPosType(POS(_, T)) :- typeNumeric(T).
    matchExecPosType(_) :- false.
