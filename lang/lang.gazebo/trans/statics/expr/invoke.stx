module statics/expr/invoke

imports

    statics/common
    statics/expr
    statics/types
    statics/type/bounds

rules

    typeOfInvoke : scope * Invoke -> TYPE

    typeOfInvoke(s, ivk@InvokeNone(Expr2Expr-I(e))) = Tr :- {Tfn}
        typeOfExpr(s, e) == Tfn,
        typeOfInvoke_internal(s, ivk, Tfn, Args([])) == Tr | error $[cannot invoke, type [Tfn] is not invokeable]@e.

    typeOfInvoke(s, ivk@InvokeArgs(Expr2Expr-I(e), a)) = Tr :- {Tfn}
        typeOfExpr(s, e) == Tfn,
        typeOfInvoke_internal(s, ivk, Tfn, a) == Tr | error $[cannot invoke, type [Tfn] is not invokeable]@e.

rules

    typeOfInvoke_internal : scope * Invoke * TYPE * Args -> TYPE

    typeOfInvoke_internal(_, _, TAG(), a) = VOID() :-
        a == Args([]) | error $[cannot invoke tag with args]@a.

    typeOfInvoke_internal(s, ivk, FUNC(Tparams, Tr), a) = Tr :- {param_names Tparams_remaining}
        funcArgsOk(s, Tparams, a) == (param_names, Tparams_remaining),
        @ivk.param_names := param_names.

rules

    funcArgsOk : scope * list((ID * TYPE)) * Args -> (list(string) * list((ID * TYPE)))

    funcArgsOk(_, [], Args(args@[_|_])) = ([], []) :-
        false | error $[too many positional arguments given]@args.

    funcArgsOk(_, params, Args([])) = ([], params).

    funcArgsOk(s, [(name, Tpar) | xs], Args([Expr2Expr-I(e) | ys])) = ([name|names], remaining) :- {Te}
        Te == typeOfExpr(withTypeInject(s, Tpar), e),
        subtype(Te, Tpar) | error $[expression type not suitable for parameter of type [Tpar]]@e,
        (names, remaining) == funcArgsOk(s, xs, Args(ys)).
