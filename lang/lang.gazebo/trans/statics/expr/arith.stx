module statics/expr/arith

imports

    statics/common
    statics/expr
    statics/type/bounds

rules

    typeOfArith : scope * Arith -> TYPE

    typeOfArith(s, m@Mul(Expr2Expr-I(l), Expr2Expr-I(r))) = typeOfArith_i(s, l, r).
    typeOfArith(s, m@Div(Expr2Expr-I(l), Expr2Expr-I(r))) = typeOfArith_i(s, l, r).
    typeOfArith(s, m@Mod(Expr2Expr-I(l), Expr2Expr-I(r))) = typeOfArith_i(s, l, r).

    typeOfArith(s, m@Add(Expr2Expr-I(l), Expr2Expr-I(r))) = typeOfArith_i(s, l, r).
    typeOfArith(s, m@Sub(Expr2Expr-I(l), Expr2Expr-I(r))) = typeOfArith_i(s, l, r).

rules

    typeOfArith_i : scope * Expr * Expr -> TYPE

    typeOfArith_i(s, l, r) = typeOfArithGeneral(Tl, Tr) :-
        Tl == typeOfExpr(s, l),
        Tr == typeOfExpr(s, r).

rules

    typeOfArithGeneral : TYPE * TYPE -> TYPE

    typeOfArithGeneral(Tl, Tr) = T :-
        typeOfArith_numeric(T@lub(Tl, Tr)) | error $[arithmetic operation is not defined between [Tl] and [Tr]].

rules

    typeOfArith_numeric : TYPE
    typeOfArith_numeric(INT()).
    typeOfArith_numeric(FLOAT()).
