module statics/expr/construct

imports

    statics/common
    statics/expr
    statics/expr/nbt
    statics/types
    statics/type/bounds
    statics/bind/memb
    statics/bind/tinj

rules

    typeOfConstruct : scope * Construct -> TYPE

    typeOfConstruct(s, ConstructExplicit(t, item)) = T :-
        T == typeOfType(s, t),
        constructOk(s, T, item).

    typeOfConstruct(s, constr@ConstructInfer(item)) = T :-
        queryTinj(s) == [(_, T)] | error $[no construct context available here]@constr,
        constructOk(s, T, item).

rules

    constructOk : scope * TYPE * ConstructItem

    constructOk(s, Tconstr, constr@ConstructNBT(nbt)) :- {Tnbt}
        Tnbt == typeOfNBT(s, nbt, Tconstr),
        subtype(Tnbt, Tconstr) | error $[expression is not a subtype of the given constructor type ([Tconstr])]@constr.

    constructOk(s, T, constr@ConstructEnum(key)) :- {s_enum}
        T == ENUM(s_enum, _) | error $[context type is not an enum]@constr,
        resolveMembLocal(s_enum, key, MEMB_ENUMKEY()) == (_, ENUMKEY()) | error $[key does not exist on enum]@key.
