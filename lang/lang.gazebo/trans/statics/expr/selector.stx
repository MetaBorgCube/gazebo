module statics/expr/selector

imports

    statics/common
    statics/expr
    statics/expr/tag-resource
    statics/bind/alias
    statics/selectors
    statics/types

rules

    typeOfSelector : scope * Selector -> TYPE
    typeOfSelector(s, Selector(name, props)) = SELECTOR(s_sel) :- {s_alias props'}
        resolveAlias(s, name) == s_alias,
        new s_sel, s_sel -P-> s,
        !sel_name[name] in s_sel,
        props' == selectorExtractProps(props),
        selectorPropsOk(s, s_sel, s_alias, props').

rules

    selectorExtractProps : list(Props) -> list(Prop)
    selectorExtractProps([]) = [].
    selectorExtractProps([Props(props)]) = props.

rules

    /** outer scope * selector root scope * current alias scope */
    selectorPropsOk : scope * scope * scope * list(Prop)
    selectorPropsOk(_, s_sel, s_alias, []) :-
        s_sel -A-> s_alias.
    selectorPropsOk(s, s_sel, s_alias, [prop|props]) :- {s_alias'}
        new s_alias', s_alias' -A-> s_alias,
        selectorPropOk(s, s_alias', prop),
        // continue to next prop
        selectorPropsOk(s, s_sel, s_alias', props).

rules

    /**
     * selector scope * prop
     * Checks if property is OK for a selector and declares it in the current selector scope.
     * Errors on any unoverridable properties (from parents).
     */
    selectorPropOk : scope * scope * Prop
    selectorPropOk(_, _, _).

    selectorPropOk(s, s_alias, KvProp(k, v)) :-
        selectorKvPropOk(s, s_alias, k, v).

    selectorPropOk(s, s_alias, IsProp(v)) :-
        // TODO: also support tag negate ("!is" perhaps?)
        selectorPropOk(s, s_alias, CmpProp("tag", CmpEqual(), v)).

    selectorPropOk(s, s_alias, CmpProp(k, cmp, v)) :-
        selectorCmpPropOk(s, s_alias, k, cmp, v).

    selectorPropOk(s, s_alias, MapProp(k, entries)) :-
        try { false } | note $[todo: map props ('advancements' and 'scores')].

rules // key-value

    selectorKvPropOk : scope * scope * ID * Expr
    selectorKvPropOk(s, _, "dx", e) :-
        typeNumeric(typeOfExpr(s, e)).
    selectorKvPropOk(s, _, "dy", e) :-
        typeNumeric(typeOfExpr(s, e)).
    selectorKvPropOk(s, _, "dz", e) :-
        typeNumeric(typeOfExpr(s, e)).
    selectorKvPropOk(s, _, "limit", e) :-
        typeOfExpr(s, e) == INT().
    selectorKvPropOk(s, _, "name", e) :-
        typeOfExpr(s, e) == STRING().
    selectorKvPropOk(_, _, "nbt", _) :-
        // TODO: check that it matches the current selector's data type
        true.
    selectorKvPropOk(s, _, "sort", e) :-
        typeOfExpr(s, e) == STRING().
    selectorKvPropOk(s, _, "team", e) :-
        typeOfExpr(s, e) == STRING().
    selectorKvPropOk(s, _, "x", e) :-
        typeNumeric(typeOfExpr(s, e)).
    selectorKvPropOk(s, _, "x_rotation", e) :-
        typeNumeric(typeOfExpr(s, e)).
    selectorKvPropOk(s, _, "y", e) :-
        typeNumeric(typeOfExpr(s, e)).
    selectorKvPropOk(s, _, "y_rotation", e) :-
        typeNumeric(typeOfExpr(s, e)).
    selectorKvPropOk(s, _, "z", e) :-
        typeNumeric(typeOfExpr(s, e)).
    selectorKvPropOk(s, _, "z_rotation", e) :-
        typeNumeric(typeOfExpr(s, e)).

rules // comparisons

    selectorCmpPropOk : scope * scope * ID * Compare * Expr
    selectorCmpPropOk(s, _, "distance", cmp, e) :-
        selectorKeyDistanceOk(s, cmp, e).
    selectorCmpPropOk(s, _, "gamemode", cmp, e) :-
        selectorKeyGamemodeOk(s, cmp, e),
        try { false } | note $[implement eqspecial constraint].
    selectorCmpPropOk(s, _, "level", cmp, e) :-
        selectorKeyLevelOk(s, cmp, e),
        try { false } | note $[ensure sender is player].
    selectorCmpPropOk(s, _, "predicate", cmp, e) :-
        selectorKeyPredicateOk(s, cmp, e).
    selectorCmpPropOk(s, _, "tag", cmp, e) :-
        selectorKeyTagOk(s, cmp, e).
    selectorCmpPropOk(s, s_alias, "type", cmp, e) :-
        selectorKeyTypeOk(s, s_alias, cmp, e).
    selectorCmpPropOk(_, _, k, _, _) :-
        false | error $[property key not recognized with comparison operator]@k.

    /* distance */
    selectorKeyDistanceOk : scope * Compare * Expr
    selectorKeyDistanceOk(s, CmpEqual(), e) :-
        selectorKeyDistanceOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyDistanceOk(s, CmpGt(), e) :-
        selectorKeyDistanceOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyDistanceOk(s, CmpGte(), e) :-
        selectorKeyDistanceOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyDistanceOk(s, CmpLt(), e) :-
        selectorKeyDistanceOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyDistanceOk(s, CmpLte(), e) :-
        selectorKeyDistanceOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyDistanceOk(s, CmpMatches(), e) :-
        selectorKeyDistanceOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyDistanceOk_eTypeOk : TYPE
    selectorKeyDistanceOk_eTypeOk(RANGE(T)) :-
        typeNumeric(T).
    selectorKeyDistanceOk_eTypeOk(T) :-
        typeNumeric(T).

    /* gaemmode */
    selectorKeyGamemodeOk : scope * Compare * Expr
    selectorKeyGamemodeOk(s, CmpNotEqual(), e) :-
        selectorKeyGamemodeOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyGamemodeOk(s, CmpEqual(), e) :-
        selectorKeyGamemodeOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyGamemodeOk_eTypeOk : TYPE
    selectorKeyGamemodeOk_eTypeOk(STRING()).

    /* level */
    selectorKeyLevelOk : scope * Compare * Expr
    selectorKeyLevelOk(s, CmpEqual(), e) :-
        selectorKeyLevelOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyLevelOk(s, CmpGt(), e) :-
        selectorKeyLevelOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyLevelOk(s, CmpGte(), e) :-
        selectorKeyLevelOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyLevelOk(s, CmpLt(), e) :-
        selectorKeyLevelOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyLevelOk(s, CmpLte(), e) :-
        selectorKeyLevelOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyLevelOk(s, CmpMatches(), e) :-
        selectorKeyLevelOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyLevelOk_eTypeOk : TYPE
    selectorKeyLevelOk_eTypeOk(RANGE(T)) :-
        typeNumeric(T).
    selectorKeyLevelOk_eTypeOk(T) :-
        typeNumeric(T).

    /* predicate */
    selectorKeyPredicateOk : scope * Compare * Expr
    selectorKeyPredicateOk(s, CmpNotEqual(), e) :-
        selectorKeyPredicateOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyPredicateOk(s, CmpEqual(), e) :-
        selectorKeyPredicateOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyPredicateOk_eTypeOk : TYPE
    selectorKeyPredicateOk_eTypeOk(RESOURCE(NSIDiFull("minecraft", ["predicate"]))).

    /* tag */
    selectorKeyTagOk : scope * Compare * Expr
    selectorKeyTagOk(s, CmpNotEqual(), e) :-
        selectorKeyTagOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyTagOk(s, CmpEqual(), e) :-
        selectorKeyTagOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyTagOk_eTypeOk : TYPE
    selectorKeyTagOk_eTypeOk(STRING()).

    /* type */
    selectorKeyTypeOk : scope * scope * Compare * Expr
    selectorKeyTypeOk(s, _, CmpNotEqual(), e) :-
        selectorKeyTypeOk_eTypeOk(typeOfExpr(s, e)).
    selectorKeyTypeOk(s, s_alias, CmpEqual(), e@Resource2Expr(resource)) :- {T}
        selectorKeyTypeOk_eTypeOk(typeOfExpr(s, e)),
        T == typeOfResourceData(s, resource),
        // TODO: ensure that we can actually narrow the current type further
        // TODO: mechanism to allow type narrowing (necessary for stdlib)
        !sel_selects_type[(T, CanNotNarrow())] in s_alias.
    selectorKeyTypeOk(s, _, CmpEqual(), e) :-
        selectorKeyTypeOk_eTypeOk(typeOfExpr(s, e)),
        try { false } | warning $[non-literal resource: won't narrow sender data type]@e.
    selectorKeyTypeOk_eTypeOk : TYPE
    selectorKeyTypeOk_eTypeOk(RESOURCE(NSIDiFull("minecraft", ["entity_type"]))).
