module statics/common

imports

    signatures/gazebo-sig
    statics/types

signature

    name-resolution

        labels
            P // parent
            M // module boundary
            I // star import (use)
            A // alias-of (for selectors)
            B // base (interfaces)
            O // origin (interfaces)

    sorts

        PROP
        MEMB_KIND
        NSIDi

    constructors

        PROP_OVERRIDABLE : TYPE -> PROP
        PROP_FINAL       : TYPE -> PROP

        MEMB_MODVARFN : MEMB_KIND
        MEMB_TYPE     : MEMB_KIND
        MEMB_ENUMKEY  : MEMB_KIND

        NSIDiFull  : string * list(string) -> NSIDi
        NSIDiShort : list(string)          -> NSIDi
        NSIDiRel   : list(string)          -> NSIDi

        /** alternative to Start with includes module name. injected by pre-analyze */
        StartInject : NSIDi * list(Use) * list(Tli) -> Start

    relations

        name_rel : -> string
        mod : NSIDi -> TYPE
        currmod : -> (NSIDi * TYPE)
        memb : (string * MEMB_KIND) -> TYPE
        field : string -> TYPE
        registry : NSIDi -> scope
        registration : NSIDi -> scope
        regmeta : string -> scope
        bs : string -> TYPE
        alias : string -> scope
        prop : string -> PROP
        enumkey : -> string
        tinj : -> TYPE
        ret : -> TYPE

rules

    withTypeInject : scope * TYPE -> scope

    withTypeInject(s, T) = s_tinj :-
        new s_tinj, s_tinj -P-> s,
        !tinj[T] in s_tinj.

rules

    currentMod : scope -> (NSIDi * scope)

    // TODO: this could maybe also be implemented without the explicit presence of the currmod relation
    currentMod(s) = (name, s_mod) :- {p p' T}
        query currmod
            filter P* and true
            min $ < P and false
            in s |-> p,
        p == [(p', (name, T))] | error $[no single mod, instead: [p]],
        T == MOD(s_mod).

rules

    stringListContains : list(string) * string
    stringListContains([], _) :- false.
    stringListContains([x], s) :- x == s.
    stringListContains([x|xs], s) :- x == s.

    stringListConcat : list(string) * list(string) -> list(string)
    stringListConcat([], r) = r.
    stringListConcat([x|xs], r) = [x | stringListConcat(xs, r)].

    stringListInit : list(string) -> list(string)
    stringListInit([]) = [].
    stringListInit([x]) = [].
    stringListInit([x | xs@[y|ys]]) = [x | stringListInit(xs)].

    stringListLast : list(string) -> string
    stringListLast([]) = "?" :- false | error $[cannot get last element from empty list].
    stringListLast([x]) = x.
    stringListLast([x|xs]) = stringListLast(xs).

    stringListFlatten : list(list(string)) -> list(string)
    stringListFlatten([]) = [].
    stringListFlatten([x]) = x.
    stringListFlatten([x|xs]) = stringListConcat(x, stringListFlatten(xs)).

rules

    nsidNameStrings : NSIDName -> list(string)
    nsidNameStrings(NSIDName(parts)) = nsidNamePartStrings(parts).

    nsidNamePartStrings maps nsidNamePartString(list(*)) = list(*)
    nsidNamePartString : NSIDNamePart -> string
    nsidNamePartString(NSIDNamePart(name)) = name.

rules

    nsidi : NSID -> NSIDi
    nsidi(NSID(ns, names)) = NSIDiFull(ns, nsidNameStrings(names)).
    nsidi(NSIDShort(names)) = NSIDiShort(nsidNameStrings(names)).
    nsidi(NSIDRel(names)) = NSIDiRel(nsidNameStrings(names)).

    nsidiName : NSIDi -> list(string)
    nsidiName(NSIDiFull(_, name)) = name.
    nsidiName(NSIDiShort(name)) = name.
    nsidiName(NSIDiRel(name)) = name.

rules

    /** rel * base -> abs */
    absolute : NSIDi * NSIDi -> NSIDi

    /** good: already absolute */
    absolute(rel@NSIDiFull(_, _), _) = rel.

    /** good: relative to namespace of base */
    absolute(NSIDiShort(rel), NSIDiFull(base_ns, _)) = NSIDiFull(base_ns, rel).

    /** good: sub-name relative to base */
    absolute(rel@NSIDiRel(name), NSIDiFull(base_ns, base_name)) = NSIDiFull(base_ns, stringListConcat(stringListInit(base_name), name)).

    /** bad: misc */
    absolute(rel@NSIDiShort(name), base) = rel :-
        false | error $[cannot compute absolute NSID of :[name] relative to [base]].

    /** bad: misc */
    absolute(rel@NSIDiRel(name), base) = rel :-
        false | error $[cannot compute absolute NSID of [name] relative to [base]].
