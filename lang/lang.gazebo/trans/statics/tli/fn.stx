module statics/tli/fn

imports

    statics/common
    statics/statement/block
    statics/expr
    statics/bind/memb
    statics/types
    statics/type/bounds

rules

    fnOk : scope * Fn

    fnOk(s, FnBlock(FnSpec(tags, modifiers, name, signature), body)) :- {s_params s_body Tparams Tret}
        (Tparams, Tret) == typeOfSign(s, signature),

        new s_params, s_params -P-> s,
        declareParams(s_params, Tparams),

        new s_body, s_body -P-> s_params,
        !ret[Tret] in s_body,
        blockOk(s_body, body),

        fnOk_common(s, name, Tparams, Tret).

    fnOk(s, FnExpr(FnSpec(tags, modifiers, name, signature), e)) :- {s_params s_body Te Tparams Tret}
        (Tparams, Tret) == typeOfSign(s, signature),

        new s_params, s_params -P-> s,
        declareParams(s_params, Tparams),

        new s_body, s_body -P-> s_params,
        typeOfExpr(withTypeInject(s_body, Tret), e) == Te,
        subtype(Te, Tret) | error $[actual returned type does not conform to the spec ([Tret])]@e,

        fnOk_common(s, name, Tparams, Tret).

    fnOk(s, FnExt(name, signature)) :- {Tparams Tret}
        (Tparams, Tret) == typeOfSign(s, signature),
        fnOk_common(s, name, Tparams, Tret).

    fnOk_common : scope * ID * list((string * TYPE)) * TYPE

    fnOk_common(s, name, Tparams, Tret) :-
        declareMemb(s, name, MEMB_MODVARFN(), FUNC(Tparams, Tret)),
        storeTliFullName(s, name).

rules

    typeOfSign : scope * Sign -> (list((ID * TYPE)) * TYPE)

    typeOfSign(s, Sign([], [])) = ([], VOID()).

    typeOfSign(s, Sign([], [ret])) = ([], typeOfSign_retSpec(s, ret)).

    typeOfSign(s, Sign([params], [])) = (typeOfSign_params(s, params), VOID()).

    typeOfSign(s, Sign([params], [ret])) = (typeOfSign_params(s, params), typeOfSign_retSpec(s, ret)).

rules

    typeOfSign_params : scope * Params -> list((ID * TYPE))

    typeOfSign_params(s, Params(params)) = flattenIdTypeList(typeOfParams(s, params)).

    typeOfParams maps typeOfParam(*, list(*)) = list(*)
    typeOfParam : scope * ParamGroup -> list((ID * TYPE))
    typeOfParam(s, ParamGroup(params, type)) = zipParamType(names, typeOfType(s, type)) :-
        names == extractParamNames(params).

    extractParamNames maps extractParamName(list(*)) = list(*)
    extractParamName : Param -> ID
    extractParamName(Param(_, name)) = name.

    zipParamType : list(ID) * TYPE -> list((ID * TYPE))
    zipParamType([], _) = [].
    zipParamType([x|xs], T) = [(x, T) | zipParamType(xs, T)].

    concatIdTypeList : list((ID * TYPE)) * list((ID * TYPE)) -> list((ID * TYPE))
    concatIdTypeList([], r) = r.
    concatIdTypeList([x|xs], r) = [x | concatIdTypeList(xs, r)].

    flattenIdTypeList : list(list((ID * TYPE))) -> list((ID * TYPE))
    flattenIdTypeList([]) = [].
    flattenIdTypeList([x]) = x.
    flattenIdTypeList([x|xs]) = concatIdTypeList(x, flattenIdTypeList(xs)).

rules

    typeOfSign_retSpec : scope * RetSpec -> TYPE

    typeOfSign_retSpec(s, RetSpec(type)) = typeOfType(s, type).

rules

    declareParams : scope * list((ID * TYPE))

    declareParams(s_params, []).
    declareParams(s_params, [(name, T)|xs]) :-
        declareMemb(s_params, name, MEMB_MODVARFN(), T),
        declareParams(s_params, xs).
