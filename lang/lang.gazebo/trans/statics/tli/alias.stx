module statics/tli/alias

imports

    statics/common
    statics/expr/selector
    statics/bind/alias

rules

    aliasOk : scope * scope * Alias

    aliasOk(_, s, Alias(dst, src)) :-
        aliasOkCommon(s, s, dst, src).

    aliasOk(s_root, s, GlobalAlias(dst, src)) :-
        aliasOkCommon(s, s_root, dst, src).

    /** special case for root selector declaration (e.g. "@e = @e" to define @e as a root selector, i.e. no A-edge) */
    aliasOk(s_root, s, GlobalAlias(Selector(name, []), Selector(name, []))) :- {s_sel_root}
        new s_sel_root,
        !name_rel[name] in s_sel_root,
        !alias_root[1] in s_sel_root,
        declareAlias(s_root, name, s_sel_root).

rules

    aliasOkCommon : scope * scope * Selector * Selector    

    aliasOkCommon(s_occurrence, s_target, dst@Selector(name, dstProps), src) :- {T s_sel}
        dstProps == [] | error $[destination must not have any properties]@dstProps,
        // TODO: ensure compile-time computation computability of srcProps
        typeOfSelector(s_occurrence, src) == T,
        T == SELECTOR(s_sel),
        declareAlias(s_target, name, s_sel).
