module statics/tli/registry

imports

    statics/common
    statics/bind/registry
    statics/bind/registration
    statics/bind/regmeta
    statics/bind/bs
    statics/expr/literal
    statics/types
    statics/type/bounds

rules

    /** root scope * module scope * registry */
    registryOk : scope * scope * Registry

    registryOk(s_root, s_mod, DynamicRegistry(RegistryName(nsid))) :- {s_registry}
        nsid == NSID(_, _) | error $[dynamic registry name must include a namespace]@nsid,
        new s_registry, s_registry -P-> s_mod,
        declareRegistry(s_root, nsidi(nsid), s_registry).

    registryOk(s_root, s_mod, StaticRegistry(RegistryName(nsid), RegistryMeta(meta))) :- {s_registry}
        nsid == NSID(_, _) | error $[static registry name must include a namespace]@nsid,
        new s_registry, s_registry -P-> s_mod,
        registryMetasOk(s_registry, meta),
        declareRegistry(s_root, nsidi(nsid), s_registry).

rules

    registryMetasOk maps registryMetaOk(*, list(*))
    /** registry scope * meta */
    registryMetaOk : scope * RegistryMetaEntry

    registryMetaOk(s, RmeProtocolId(id)) :- {s_meta}
        new s_meta,
        // TODO: declare actual value type as INT() in regmeta (scope?)
        declareRegmeta(s, "protocol_id", s_meta).

    registryMetaOk(s, RmeStates(ss)) :- {s_ss}
        new s_ss,
        statesOk(s, s_ss, ss),
        declareRegmeta(s, "states", s_ss).

    registryMetaOk(s, RmeData(t)) :- {s_data}
        COMPOUND(s_data) == typeOfType(s, t) | error $[data type must be an interface]@t,
        declareRegmeta(s, "data", s_data).

    registryMetaOk(s, RmeRegistration(id, RegistryMeta(meta))) :- {s_registration}
        id == NSID(_, _) | error $[registration name must include a namespace]@id,
        new s_registration, s_registration -P-> s,
        declareRegistration(s, nsidi(id), s_registration),
        registryMetasNoRegistration(meta),
        registryMetasOk(s_registration, meta).

rules

    /** ensure that a list of registry meta entries does not contain a registration */
    registryMetasNoRegistration maps registryMetaNoRegistration(list(*))
    registryMetaNoRegistration : RegistryMetaEntry
    registryMetaNoRegistration(reg@RmeRegistration(_, _)) :-
        false | error $[registration cannot contain another registration in its metadata]@reg.
    registryMetaNoRegistration(_).

rules

    statesOk maps stateOk(*, *, list(*))
    stateOk : scope * scope * RmeState
    stateOk(s, s_ss, RmeState(name, t, options)) :- {T}
        T == typeOfType(s, t),
        stateOptionsOk(s, T, options),
        declareState(s_ss, name, T).

    stateOptionsOk maps stateOptionOk(*, *, list(*))
    stateOptionOk : scope * TYPE * Literal
    stateOptionOk(s, Tbs, lit) :- {Tlit}
        Tlit == typeOfLiteral(s, lit),
        subtype(Tlit, Tbs) | error $[type of option ([Tlit]) is not assignable to the type of state ([Tbs])]@lit.
