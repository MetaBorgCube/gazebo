module statics/expr

imports

    statics/common
    statics/expr/nbt
    statics/expr/selector
    statics/expr/tag-resource
    statics/expr/literal
    statics/expr/ref
    statics/expr/find
    statics/expr/invoke
    statics/expr/arith
    statics/expr/range
    statics/expr/vec
    statics/expr/construct
    statics/expr/raw
    statics/types

rules

    typeOfExpr : scope * Expr -> TYPE

    typeOfExpr(s, e) = T@typeOfExprImpl(s, e) :-
        // set type for 'normal' (i.e. non-implicit) expressions
        try { @e.type := T }.

    /** do not refer directly, use typeOfExpr */
    typeOfExprImpl : scope * Expr -> TYPE

rules // NBT

    typeOfExprImpl(s, NBT2Expr(nbt)) = T :-
        // explicitly disacard any possibility of a type hint,
        // because NBT can only be used with a hint if explicitly requested to do so,
        // using the constructor syntax
        typeOfNBT(s, nbt, UNK()) == T.

rules // selector

    typeOfExprImpl(s, Selector2Expr(sel)) = T :-
        typeOfSelector(s, sel) == T,
        @sel.type := T.

rules // tag & resource

    typeOfExprImpl(s, Resource2Expr(res)) = T :-
        typeOfResource(s, res) == T,
        @res.type := T.

    typeOfExprImpl(s, Tag2Expr(tag)) = T :-
        typeOfTag(s, tag) == T,
        @tag.type := T.

rules // literal

    typeOfExprImpl(s, Literal2Expr(lit)) = T :-
        typeOfLiteral(s, lit) == T,
        @lit.type := T.

rules // ref

    typeOfExprImpl(s, Ref2Expr(ref)) = T :-
        typeOfRef(s, ref) == T,
        @ref.type := T.

rules // find

    typeOfExprImpl(s, Find2Expr(find)) = T :-
        typeOfFind(s, find) == T,
        @find.type := T.

rules // invoke

    typeOfExprImpl(s, Invoke2Expr(i)) = T :-
        typeOfInvoke(s, i) == T,
        @i.type := T.

rules // arithmetic

    typeOfExprImpl(s, Arith2Expr(arith)) = T :-
        typeOfArith(s, arith) == T,
        @arith.type := T.

rules // compare (boolean logic)

    typeOfExprImpl(s, And(Expr2Expr-I(l), Expr2Expr-I(r))) = BOOL() :- {Tl Tr}
        typeOfExpr(s, l) == Tl,
        typeOfExpr(s, r) == Tr,
        typeBoolish(Tl) | error $[cannot and non-boolean value]@l,
        typeBoolish(Tr) | error $[cannot and non-boolean value]@r.

    typeOfExprImpl(s, Or(Expr2Expr-I(l), Expr2Expr-I(r))) = BOOL() :- {Tl Tr}
        typeOfExpr(s, l) == Tl,
        typeOfExpr(s, r) == Tr,
        typeBoolish(Tl) | error $[cannot or non-boolean value]@l,
        typeBoolish(Tr) | error $[cannot or non-boolean value]@r.

    typeOfExprImpl(s, Not(Expr2Expr-I(e))) = BOOL() :- {Te}
        typeOfExpr(s, e) == Te,
        typeBoolish(Te) | error $[cannot negate non-boolean value]@e.

    typeOfExprImpl(s, cmp@Cmp(Expr2Expr-I(l), op, Expr2Expr-I(r))) = BOOL() :- {Tl Tr}
        typeOfExpr(s, l) == Tl,
        typeOfExpr(s, r) == Tr,
        typeComparable(op, Tl, Tr) | error $[[Tl] and [Tr] are not comparable]@cmp.

rules // range

    typeOfExprImpl(s, Range2Expr(range)) = T :-
        T == typeOfRange(s, range),
        @range.type := T.

rules // vector (position)

    typeOfExprImpl(s, Vec2Expr(vec)) = T :-
        T == typeOfVec(s, vec),
        @vec.type := T.

rules // lambda

    typeOfExprImpl(s, Lambda2Expr(lambda)) = LAMBDA() :-
        try { false } | note $[future].

rules // construct

    typeOfExprImpl(s, Construct2Expr(constr)) = T :-
        T == typeOfConstruct(s, constr),
        @constr.type := T.

rules // raw

    typeOfExprImpl(s, Raw2Expr(raw)) = T :-
        T == typeOfRaw(s, raw),
        @raw.type := T.
