module statics/type/bounds

imports

    statics/common
    statics/bind/field
    statics/type/interface
    statics/type/bounds-lub-compound
    statics/type/bounds-llb-compound

rules

    /** check if first type is a subtype of the second type (or eq) */
    // TODO: check if all possibilities are defined
    subtype : TYPE * TYPE

    subtype(OPTIONAL(Ta), OPTIONAL(Tb)) :- subtype(Ta, Tb).
    subtype(Ta, OPTIONAL(Tb)) :- subtype(Ta, Tb).
    // OPTIONAL(Ta) <: Tb never holds if Tb is not optional

    subtype(INT(), LONG()).
    subtype(SHORT(), LONG()).
    subtype(BYTE(), LONG()).
    subtype(SHORT(), INT()).
    subtype(BYTE(), INT()).
    subtype(BYTE(), SHORT()).

    subtype(LONG(), DOUBLE()).
    subtype(INT(), DOUBLE()).
    subtype(SHORT(), DOUBLE()).
    subtype(BYTE(), DOUBLE()).
    subtype(FLOAT(), DOUBLE()).
    subtype(LONG(), FLOAT()).
    subtype(INT(), FLOAT()).
    subtype(SHORT(), FLOAT()).
    subtype(BYTE(), FLOAT()).

    // TODO: ensure POS kinds are legal
    subtype(POS(ka, Ta), POS(kb, Tb)) :- subtype(Ta, Tb).
    subtype(RANGE(a), RANGE(b)) :- subtype(a, b).

    subtype(ITER(a), ITER(b)) :- subtype(a, b).

    subtype(COMPOUND(s_comp_a), COMPOUND(s_comp_b)) :- subtypeCompound(s_comp_a, s_comp_b).
    subtype(LIST(a), LIST(b)) :- subtype(a, b).
    subtype(ARRAY(a), ARRAY(b)) :- subtype(a, b).

    // TODO: ensure selector constraints are satisfied
    subtype(SELECTOR(_), SELECTOR(_)).

    subtype(_, UNK()).
    subtype(BOTTOM(), _).

    subtype(a, b) :- a == b.

rules

    /** check if the first compound scope is a structural subtype of the second compound scope */
    subtypeCompound : scope * scope

    subtypeCompound(s, s) :- true.
    subtypeCompound(s_comp_a, s_comp_b) :- {allmembs_b}
        // all members of 'b' must be present in 'a' with the 'a' items being a subtype of the corresponding 'b' item,
        // but 'a' may have more members
        allmembs_b == queryAllFields(s_comp_b),
        subtypeCompound_membersOk(s_comp_a, allmembs_b).

    subtypeCompound_membersOk maps subtypeCompound_memberOk(*, list(*))
    subtypeCompound_memberOk : scope * (path * (string * TYPE))
    subtypeCompound_memberOk(s_comp_a, memb_b@(_, (name, Tb))) :-
        subtypeCompound_memberOk_matchField(Tb, queryField(s_comp_a, name)) /*TODO: error message?*/.

    subtypeCompound_memberOk_matchField : TYPE * list((path * (string * TYPE)))
    subtypeCompound_memberOk_matchField(Tb@OPTIONAL(_), []).
    subtypeCompound_memberOk_matchField(Tb, [(_, (_, Ta)) | _]) :-
        subtype(Ta, Tb).

rules

    /** derive least upper bound */
    // TODO: check if all possibilities are defined
    lub : TYPE * TYPE -> TYPE

    lub(OPTIONAL(Ta), OPTIONAL(Tb)) = OPTIONAL(lub(Ta, Tb)).
    lub(Ta, OPTIONAL(Tb)) = lub(Ta, Tb).
    lub(OPTIONAL(Ta), Tb) = lub(Ta, Tb).

    lub(LONG(), INT()) = LONG().
    lub(LONG(), SHORT()) = LONG().
    lub(LONG(), BYTE()) = LONG().
    lub(LONG(), DOUBLE()) = DOUBLE().
    lub(LONG(), FLOAT()) = FLOAT().
    lub(INT(), LONG()) = LONG().
    lub(INT(), SHORT()) = INT().
    lub(INT(), BYTE()) = INT().
    lub(INT(), DOUBLE()) = DOUBLE().
    lub(INT(), FLOAT()) = FLOAT().
    lub(SHORT(), LONG()) = LONG().
    lub(SHORT(), INT()) = INT().
    lub(SHORT(), BYTE()) = SHORT().
    lub(SHORT(), DOUBLE()) = DOUBLE().
    lub(SHORT(), FLOAT()) = FLOAT().
    lub(BYTE(), LONG()) = LONG().
    lub(BYTE(), INT()) = INT().
    lub(BYTE(), SHORT()) = SHORT().
    lub(BYTE(), DOUBLE()) = DOUBLE().
    lub(BYTE(), FLOAT()) = FLOAT().
    lub(DOUBLE(), LONG()) = DOUBLE().
    lub(DOUBLE(), INT()) = DOUBLE().
    lub(DOUBLE(), SHORT()) = DOUBLE().
    lub(DOUBLE(), BYTE()) = DOUBLE().
    lub(DOUBLE(), FLOAT()) = DOUBLE().
    lub(FLOAT(), LONG()) = FLOAT().
    lub(FLOAT(), INT()) = FLOAT().
    lub(FLOAT(), SHORT()) = FLOAT().
    lub(FLOAT(), BYTE()) = FLOAT().
    lub(FLOAT(), DOUBLE()) = DOUBLE().

    lub(POS(k_a, Ta), POS(k_b, Tb)) = POS(lubPosKind(k_a, k_b), lub(Ta, Tb)).
    lubPosKind : POS_KIND * POS_KIND -> POS_KIND
    lubPosKind(POS_ABS(), POS_ANY()) = POS_ABS().
    lubPosKind(POS_ANY(), POS_ABS()) = POS_ABS().
    lubPosKind(POS_REL(), POS_ANY()) = POS_REL().
    lubPosKind(POS_ANY(), POS_REL()) = POS_REL().
    lubPosKind(POS_LOC(), POS_ANY()) = POS_LOC().
    lubPosKind(POS_ANY(), POS_LOC()) = POS_LOC().
    lubPosKind(k, k) = k.

    lub(RANGE(a), RANGE(b)) = RANGE(lub(a, b)).

    lub(ITER(a), ITER(b)) = ITER(lub(a, b)).

    lub(COMPOUND(s_comp_a), COMPOUND(s_comp_b)) = COMPOUND(lubCompound([s_comp_a, s_comp_b])).
    lub(LIST(a), LIST(b)) = LIST(lub(a, b)).
    lub(ARRAY(a), ARRAY(b)) = ARRAY(lub(a, b)).

    lub(SELECTOR(_), SELECTOR(_)) = SELECTOR(s_sel_lub) :-
        // TODO: selector intersection
        new s_sel_lub.

    lub(a, UNK()) = a.
    lub(UNK(), b) = b.

    lub(a, b) = a :-
        a == b | error $[no type commonality].

rules

    /** derive least lower bound */
    llb : TYPE * TYPE -> TYPE

    llb(OPTIONAL(Ta), OPTIONAL(Tb)) = OPTIONAL(llb(Ta, Tb)).
    llb(Ta, OPTIONAL(Tb)) = OPTIONAL(llb(Ta, Tb)).
    llb(OPTIONAL(Ta), Tb) = OPTIONAL(llb(Ta, Tb)).

    llb(LONG(), INT()) = INT().
    llb(LONG(), SHORT()) = SHORT().
    llb(LONG(), BYTE()) = BYTE().
    llb(LONG(), DOUBLE()) = LONG().
    llb(LONG(), FLOAT()) = LONG().
    llb(INT(), LONG()) = INT().
    llb(INT(), SHORT()) = SHORT().
    llb(INT(), BYTE()) = BYTE().
    llb(INT(), DOUBLE()) = INT().
    llb(INT(), FLOAT()) = INT().
    llb(SHORT(), LONG()) = SHORT().
    llb(SHORT(), INT()) = SHORT().
    llb(SHORT(), BYTE()) = BYTE().
    llb(SHORT(), DOUBLE()) = SHORT().
    llb(SHORT(), FLOAT()) = SHORT().
    llb(BYTE(), LONG()) = BYTE().
    llb(BYTE(), INT()) = BYTE().
    llb(BYTE(), SHORT()) = BYTE().
    llb(BYTE(), DOUBLE()) = BYTE().
    llb(BYTE(), FLOAT()) = BYTE().
    llb(DOUBLE(), LONG()) = LONG().
    llb(DOUBLE(), INT()) = INT().
    llb(DOUBLE(), SHORT()) = SHORT().
    llb(DOUBLE(), BYTE()) = BYTE().
    llb(DOUBLE(), FLOAT()) = FLOAT().
    llb(FLOAT(), LONG()) = LONG().
    llb(FLOAT(), INT()) = INT().
    llb(FLOAT(), SHORT()) = SHORT().
    llb(FLOAT(), BYTE()) = BYTE().
    llb(FLOAT(), DOUBLE()) = FLOAT().

    llb(POS(k_a, Ta), POS(k_b, Tb)) = POS(llbPosKind(k_a, k_b), llb(Ta, Tb)).
    llbPosKind : POS_KIND * POS_KIND -> POS_KIND
    llbPosKind(POS_ANY(), _) = POS_ANY().
    llbPosKind(_, POS_ANY()) = POS_ANY().
    llbPosKind(k, k) = k.

    llb(RANGE(a), RANGE(b)) = RANGE(llb(a, b)).

    llb(ITER(a), ITER(b)) = ITER(llb(a, b)).

    llb(COMPOUND(s_comp_a), COMPOUND(s_comp_b)) = COMPOUND(llbCompound([s_comp_a, s_comp_b])).
    llb(LIST(a), LIST(b)) = LIST(llb(a, b)).
    llb(ARRAY(a), ARRAY(b)) = ARRAY(llb(a, b)).

    llb(SELECTOR(_), SELECTOR(_)) = SELECTOR(s_sel_llb) :-
        // TODO: selector union
        new s_sel_llb.

    llb(UNK(), T) = T.
    llb(T, UNK()) = T.
    llb(Tl, Tr) = llb_matchEq(Tl, Tr).

    llb_matchEq : TYPE * TYPE -> TYPE
    llb_matchEq(T, T) = T.
    llb_matchEq(_, _) = BOTTOM().
