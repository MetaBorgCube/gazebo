module statics/type/bounds

imports

    statics/common
    statics/bind/field
    statics/type/interface
    statics/type/bounds-lub-compound
    statics/type/bounds-llb-compound

rules

    /** check if first type is a subtype of the second type (or eq) */
    // TODO: check if all possibilities are defined
    subtype : TYPE * TYPE

    subtype(OPTIONAL(Ta), OPTIONAL(Tb)) :- subtype(Ta, Tb).
    subtype(Ta, OPTIONAL(Tb)) :- subtype(Ta, Tb).
    // OPTIONAL(Ta) <: Tb never holds if Tb is not optional

    subtype(INT(), FLOAT()).

    // TODO: ensure POS kinds are legal
    subtype(POS(ka, Ta), POS(kb, Tb)) :- subtype(Ta, Tb).
    subtype(RANGE(a), RANGE(b)) :- subtype(a, b).

    subtype(ITER(a), ITER(b)) :- subtype(a, b).

    subtype(COMPOUND(s_comp_a), COMPOUND(s_comp_b)) :- subtypeCompound(s_comp_a, s_comp_b).
    subtype(LIST(a), LIST(b)) :- subtype(a, b).
    subtype(ARRAY(a), ARRAY(b)) :- subtype(a, b).

    // TODO: ensure selector constraints are satisfied
    subtype(SELECTOR(_), SELECTOR(_)).

    subtype(_, UNK()).
    subtype(BOTTOM(), _).
    //LAMBDA

    subtype(a, b) :- a == b.

rules

    /** check if the first compound scope is a structural subtype of the second compound scope */
    subtypeCompound : scope * scope

    subtypeCompound(s_comp_a, s_comp_b) :- {allmembs_b}
        // all members of 'b' must be present in 'a' with the 'a' items being a subtype of the corresponding 'b' item,
        // but 'a' may have more members
        allmembs_b == queryAllFields(s_comp_b),
        subtypeCompound_membersOk(s_comp_a, allmembs_b).

    subtypeCompound_membersOk maps subtypeCompound_memberOk(*, list(*))
    subtypeCompound_memberOk : scope * (path * (string * TYPE))
    subtypeCompound_memberOk(s_comp_a, memb_b@(_, (name, Tb))) :-
        subtypeCompound_memberOk_matchField(Tb, queryField(s_comp_a, name)) /*TODO: error message?*/.

    subtypeCompound_memberOk_matchField : TYPE * list((path * (string * TYPE)))
    subtypeCompound_memberOk_matchField(Tb@OPTIONAL(_), []).
    subtypeCompound_memberOk_matchField(Tb, [(_, (_, Ta)) | _]) :-
        subtype(Ta, Tb).

rules

    /** derive least upper bound */
    // TODO: check if all possibilities are defined
    lub : TYPE * TYPE -> TYPE

    lub(OPTIONAL(Ta), OPTIONAL(Tb)) = OPTIONAL(lub(Ta, Tb)).
    lub(Ta, OPTIONAL(Tb)) = lub(Ta, Tb).
    lub(OPTIONAL(Ta), Tb) = lub(Ta, Tb).

    lub(FLOAT(), INT()) = FLOAT().
    lub(INT(), FLOAT()) = FLOAT().

    // TODO: LUB of kinds
    lub(POS(k_a, Ta), POS(k_b, Tb)) = POS(POS_ANY(), lub(Ta, Tb)).
    lub(RANGE(a), RANGE(b)) = RANGE(lub(a, b)).

    lub(ITER(a), ITER(b)) = ITER(lub(a, b)).

    lub(COMPOUND(s_comp_a), COMPOUND(s_comp_b)) = COMPOUND(lubCompound([s_comp_a, s_comp_b])).
    lub(LIST(a), LIST(b)) = LIST(lub(a, b)).
    lub(ARRAY(a), ARRAY(b)) = ARRAY(lub(a, b)).

    lub(SELECTOR(_), SELECTOR(_)) = SELECTOR(s_sel_lub) :-
        // TODO: selector intersection
        new s_sel_lub.

    lub(a, UNK()) = a.
    lub(UNK(), b) = b.

    lub(a, b) = a :-
        a == b | error $[no type commonality].

rules

    /** derive least lower bound */
    llb : TYPE * TYPE -> TYPE

    llb(OPTIONAL(Ta), OPTIONAL(Tb)) = OPTIONAL(llb(Ta, Tb)).
    llb(Ta, OPTIONAL(Tb)) = OPTIONAL(llb(Ta, Tb)).
    llb(OPTIONAL(Ta), Tb) = OPTIONAL(llb(Ta, Tb)).

    llb(FLOAT(), INT()) = INT().
    llb(INT(), FLOAT()) = INT().

    // TODO: LLB of kinds
    llb(POS(k_a, Ta), POS(k_b, Tb)) = POS(POS_ANY(), llb(Ta, Tb)).
    llb(RANGE(a), RANGE(b)) = RANGE(llb(a, b)).

    llb(ITER(a), ITER(b)) = ITER(llb(a, b)).

    llb(COMPOUND(s_comp_a), COMPOUND(s_comp_b)) = COMPOUND(llbCompound([s_comp_a, s_comp_b])).
    llb(LIST(a), LIST(b)) = LIST(llb(a, b)).
    llb(ARRAY(a), ARRAY(b)) = ARRAY(llb(a, b)).

    llb(SELECTOR(_), SELECTOR(_)) = SELECTOR(s_sel_llb) :-
        // TODO: selector union
        new s_sel_llb.

    llb(UNK(), T) = T.
    llb(T, UNK()) = T.
    llb(Tl, Tr) = llb_matchEq(Tl, Tr).

    llb_matchEq : TYPE * TYPE -> TYPE
    llb_matchEq(T, T) = T.
    llb_matchEq(_, _) = BOTTOM().
