module statics/type/enum

imports

    statics/common
    statics/bind/memb
    statics/expr
    statics/types
    statics/type/bounds

rules

    typeOfEnum : scope * Type -> TYPE

    typeOfEnum(s, TypeEnumTyped(t, membs)) = ENUM(s_enum_t, T) :-
        T == typeOfType(s, t),
        enumTypeOk(T) | error $[type [T] is not a valid type for the enum backing value],
        new s_enum_t, s_enum_t -P-> s,
        enumTypedMembsOk(s_enum_t, T, membs).

    typeOfEnum(s, TypeEnumUntyped(membs)) = ENUM(s_enum, INT()) :-
        new s_enum, s_enum -P-> s,
        declareAutomaticEnumKeys(s_enum, membs).

rules

  enumTypeOk : TYPE
  enumTypeOk(INT()).
  enumTypeOk(STRING()).

rules

    enumTypedMembsOk maps enumTypedMembOk(*, *, list(*))
    enumTypedMembOk : scope * TYPE * EnumTypedMemb
    enumTypedMembOk(s_enum_t, Tenum, EnumTypedMemb(name, Literal2Expr(NumI(value)))) :-
        declareEnumKeyString(s_enum_t, name, value).
    enumTypedMembOk(s_enum_t, Tenum, EnumTypedMemb(name, Literal2Expr(String(value)))) :-
        declareEnumKeyString(s_enum_t, name, value).

rules

    declareAutomaticEnumKeys : scope * list(string)
    declareAutomaticEnumKeys(s, membs) :- declareAutomaticEnumKey(s, membs, 0).

    declareAutomaticEnumKey : scope * list(string) * int
    declareAutomaticEnumKey(s, [], _).
    declareAutomaticEnumKey(s, [key|tail], idx) :- {idx'}
        idx' #= idx + 1,
        declareEnumKeyInteger(s, key, idx),
        declareAutomaticEnumKey(s, tail, idx').

    declareEnumKeyInteger : scope * string * int
    declareEnumKeyInteger(s, key, value) :-
        declareMemb(s, key, MEMB_ENUMKEY(), ENUM_V_INT(value)).

    declareEnumKeyString : scope * string * string
    declareEnumKeyString(s, key, value) :-
        declareMemb(s, key, MEMB_ENUMKEY(), ENUM_V_STR(value)).
