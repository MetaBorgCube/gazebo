module gazebo/Statement

imports

    gazebo/Common
    gazebo/Expr
    gazebo/Exec
    gazebo/NBT
    gazebo/Raw

context-free sorts

    Block
    Statement

/**
 * General basis for statements
 */
context-free syntax

    // Imported statements
    Statement = Exec

    // Primitive statements
    Statement.InvokeStmt = Invoke
    Statement.Break = <break>
    Statement.Noop = <;>

    Block.Block = <
    {
        <{Statement "\n"}*>
    }
    >
    Block.SingleStmt = [=> [Statement]]

lexical syntax

    ID = "break" {reject}

/**
 * Declaration statement
 */
context-free sorts Decl DeclModifier
context-free syntax

    Statement = Decl
    Decl.Decl = <<DeclModifier*> <ID> := <Expr>>
    DeclModifier.DmodMut = <mut>
    DeclModifier.DmodConst = <const>

lexical syntax

    ID = "mut" {reject}
    ID = "const" {reject}

/**
 * For loop/statement
 */
context-free sorts For
context-free syntax

    Statement = For
    For.ForInfinite = <
        for
        <Block>    
    >
    For.ForWhile = <
        for <Expr>
        <Block>
    >
    For.ForIn = [
        for [{ID ", "}+] <- [Expr]
        [Block]
    ]

lexical syntax

    ID = "for" {reject}
    ID = "in" {reject}

/**
 * If statement
 */
context-free sorts If Else
context-free syntax

    Statement = If
    If.If = <
        if <Expr>
        <Block>
        <Else>
    >

    // TODO: fix pp
    Else.ElseIf = <else <If>> {prefer}
    Else.ElseBlock = <
        else
        <Block>
    >
    Else.NoElse = <>

context-free priorities

    // FIXME: this does not appear to have any effect. using {prefer} currently, but that's not ideal
    Else.ElseIf
    > Else.ElseBlock
    > Else.NoElse

lexical syntax

    // reject if and else as identifiers
    ID = "if" {reject}
    ID = "else" {reject}

/**
 * Switch/match statement
 */
context-free sorts Match Case
context-free syntax

    Statement = Match
    Match.Match = <
        match <Expr>
        {
            <Case*>
        }
    >
    Case.Case = <
        <Expr>
        <Block>
    >
    Case.CaseDefault = <
        _
        <Block>
    >

lexical syntax

    ID = "match" {reject}

/**
 * Return statement
 */
context-free sorts Return
context-free syntax

    Statement = Return
    Return.ReturnEmpty = <return>
    Return.ReturnValue = <return <Expr>>

lexical syntax

    ID = "return" {reject}

/**
 * Assign statement
 */
context-free sorts Assign
context-free syntax

    Statement = Assign
    Assign.AssignEq = <<Expr> = <Expr>>
    Assign.AssignAdd = <<Expr> += <Expr>>
    Assign.AssignSub = <<Expr> -= <Expr>>
    Assign.AssignMul = <<Expr> *= <Expr>>
    Assign.AssignDiv = <<Expr> /= <Expr>>
    Assign.AssignMod = <<Expr> %= <Expr>>

/**
 * Raw statement
 */
context-free syntax

    Statement.RawStmt = <raw <Raw>>

template options

    keyword -/- [A-Za-z0-9]
