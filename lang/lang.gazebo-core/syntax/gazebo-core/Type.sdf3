module gazebo-core/Type

imports

    gazebo-core/Common
    gazebo-core/Expr
    gazebo-core/Identifier

context-free sorts

    TypeRefCreate-C

    Type-C
    PosKind-C
    EnumMemb-C
    InterfaceMemb-C

context-free syntax

    TypeRefCreate-C.TypeRefCreate-C = <<INT>`>

context-free syntax

    Type-C.TypeRef-C = <`<INT>>

context-free syntax

    Type-C.TypeString-C = <String>
    Type-C.TypeBool-C = <Bool>
    Type-C.TypeLong-C = <Long>
    Type-C.TypeInt-C = <Int>
    Type-C.TypeShort-C = <Short>
    Type-C.TypeByte-C = <Byte>
    Type-C.TypeDouble-C = <Double>
    Type-C.TypeFloat-C = <Float>

context-free syntax

    Type-C.TypePos-C = <`<PosKind-C><Type-C>>
    PosKind-C.PosKindAbs-C = <>
    PosKind-C.PosKindRel-C = <~>
    PosKind-C.PosKindLoc-C = <^>
    PosKind-C.PosKindAny-C = <*>

context-free syntax

    Type-C.TypeResourceRegistry-C = <$<IdentFull-C>>
    Type-C.TypeTag-C = <#>

context-free syntax

    Type-C.TypeSelector-C = [@]

context-free syntax

    Type-C.TypeArrayDynamic-C = <<TypeRefCreate-C?>[<Type-C>;]>
    //Type-C.TypeArrayFixedAnonymous-C = <<TypeRefCreate-C?>[<Type-C>; <INT>]>
    //Type-C.TypeArrayFixedNamed-C = <<TypeRefCreate-C?>[<Type-C>; <{ID ", "}+>]>
    Type-C.TypeListDynamic-C = <<TypeRefCreate-C?>[<Type-C>]>
    //Type-C.TypeListFixedAnonymous-C = <<TypeRefCreate-C?>[<Type-C>: <INT>]>
    //Type-C.TypeListFixedNamed-C = <<TypeRefCreate-C?>[<Type-C>: <{ID ", "}+>]>

context-free syntax

    Type-C.TypeEnumInt-C = <
        enum Int
        {
            <{EnumMemb-C ",\n"}+>
        }
    >
    Type-C.TypeEnumString-C = <
        enum String
        {
            <{EnumMemb-C ",\n"}+>
        }
    >

    EnumMemb-C.EnumMembInt-C = <<ID> = <INT>>
    EnumMemb-C.EnumMembString-C = <<ID> = <STRING>>

context-free syntax

    Type-C.TypeInterface-C = <
        <TypeRefCreate-C?>interface
        {
            <{InterfaceMemb-C ",\n"}*>
        }
    >

    InterfaceMemb-C.InterfaceMemb-C = <<STRING> <Type-C>>

context-free syntax

    Type-C.TypeUnk-C = <__UNK>
    Type-C.TypeBottom-C = <__BOTTOM>
    Type-C.TypeVoid-C = <__VOID>
