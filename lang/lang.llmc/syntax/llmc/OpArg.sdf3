module llmc/OpArg

imports

    llmc/Common
    llmc/Path
    llmc/Type

context-free sorts Op-LL
context-free syntax

    Op-LL.OpAdd-LL = <add>
    Op-LL.OpSub-LL = <sub>
    Op-LL.OpMul-LL = <mul>
    Op-LL.OpDiv-LL = <div>
    Op-LL.OpMod-LL = <mod>
    Op-LL.OpCountElements-LL = <count>
    Op-LL.OpFind-LL = <find>
    Op-LL.OpDel-LL = <del>
    Op-LL.OpInvoke-LL = <ivk>
    Op-LL.OpNew-LL = <new>

context-free sorts Arg-LL
context-free syntax

    Arg-LL.ArgVar-LL = ID
    Arg-LL.ArgString-LL = STRING
    Arg-LL.ArgIntB-LL = <<INT>B>
    Arg-LL.ArgIntS-LL = <<INT>S>
    Arg-LL.ArgIntI-LL = <<INT>I>
    Arg-LL.ArgIntL-LL = <<INT>L>
    Arg-LL.ArgFloatS-LL = <<FLOAT>F> // single-precision
    Arg-LL.ArgFloatD-LL = <<FLOAT>D> // double-precision
    Arg-LL.ArgList-LL = <l[<{Arg-LL ", "}*>]>
    Arg-LL.ArgArray-LL = <a[<{Arg-LL ", "}*>]>
    Arg-LL.ArgCompound-LL = <c[<{CompoundEntry-LL ", "}*>]>
    Arg-LL.ArgRange-LL = <..[<RangePart-LL>, <RangePart-LL>]>
    Arg-LL.ArgPos-LL = <p[<PosKind-LL>; <PosCoordKind-LL> <Arg-LL>, <PosCoordKind-LL> <Arg-LL>, <PosCoordKind-LL> <Arg-LL>]>
    Arg-LL.ArgRes-LL = <r[<NSID-LL>, <NSID-LL>]<ResourceState-LL>>
    Arg-LL.ArgTag-LL = <t[<NSID-LL>]>
    Arg-LL.ArgPath-LL = Path-LL
    Arg-LL.ArgSelector-LL = Selector-LL
    Arg-LL.ArgRaw-LL = <|[<{UnsafePart-LL ", "}+>]>
    Arg-LL.ArgUnsafe-LL = </[<{UnsafePart-LL ", "}+>]>

    Arg-LL.ArgCond-LL = BoolCond-LL
    Arg-LL.ArgFunction-LL = <<NSID-LL>>
    Arg-LL.ArgParam-LL = <(<ID> <Type-LL>)@<Arg-LL>>

context-free sorts RangePart-LL
context-free syntax

    RangePart-LL.RangePartNone-LL = <>
    RangePart-LL.RangePartSome-LL = <<Arg-LL>>

context-free sorts BoolCond-LL Cmp-LL
context-free syntax

    BoolCond-LL.BoolCondCmp-LL = <<Arg-LL> <Cmp-LL> <Arg-LL>>
    Cmp-LL.CmpLt-LL = [<]
    Cmp-LL.CmpLte-LL = [<=]
    Cmp-LL.CmpEq-LL = [=]
    Cmp-LL.CmpGt-LL = [>]
    Cmp-LL.CmpGte-LL = [>=]

lexical syntax

    ID = "true" {reject}
    ID = "false" {reject}

context-free sorts CompoundEntry-LL
context-free syntax

    CompoundEntry-LL.CompoundEntry-LL = <<STRING> <Arg-LL>>

context-free sorts PosCoordKind-LL
context-free syntax

    PosCoordKind-LL.PosCoordAbs-LL = <>
    PosCoordKind-LL.PosCoordDyn-LL = <dyn>

context-free sorts ResourceState-LL StateKv-LL
context-free syntax

    ResourceState-LL.NoResourceState-LL = <>
    ResourceState-LL.StatesWithPayload-LL = <+[<{StateKv-LL ", "}*>][<Arg-LL?>]>
    StateKv-LL.StateKv-LL = <<ID> = <Arg-LL>>

context-free sorts Selector-LL SelectorType-LL SelectorProp-LL SelectorPropKv-LL
context-free syntax

    Selector-LL.Selector-LL = <<SelectorType-LL>[<{SelectorProp-LL ", "}*>]>

    SelectorType-LL.SelectorE-LL = <@e>
    SelectorType-LL.SelectorA-LL = <@a>
    SelectorType-LL.SelectorP-LL = <@p>
    SelectorType-LL.SelectorR-LL = <@r>
    SelectorType-LL.SelectorS-LL = <@s>

    SelectorProp-LL.SelectorPropKv-LL = <<SelectorPropKv-LL>>
    SelectorProp-LL.SelectorPropMap-LL = <<ID> = {<{SelectorPropKv-LL ", "}*>}>

    SelectorPropKv-LL.SelectorPropKvEqual-LL = <<ID> = <Arg-LL>>
    SelectorPropKv-LL.SelectorPropKvNotEqual-LL = <<ID> != <Arg-LL>>

context-free sorts UnsafePart-LL
context-free syntax

    UnsafePart-LL.UnsafePartString-LL = <<STRING>>
    UnsafePart-LL.UnsafePartFormatted-LL = <(<ID>) <Arg-LL>>
