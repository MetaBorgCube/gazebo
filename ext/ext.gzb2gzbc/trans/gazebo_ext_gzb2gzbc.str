module gazebo_ext_gzb2gzbc

imports

  signatures/-

  pp/gazebo-core-parenthesize
  pp/gazebo-core-pp

  libspoofax/-
  statix/api
  
  libstratego-gpp

  common

strategies

  get-filename: s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s
    ; s' := <last> names

  get-dir(|path): s -> s'
    with
      names := <strip-annos; string-tokenize(|['/'])> s
    ; names' := <at-last(![])> names
    ; if [h | tl] := names' then
        s' := <concat-strings> [path, "/",  <separate-by(|"/"); concat-strings> names']
      else
        s' := path
      end

  get-src-gen(|project-path, folder, ext):
    filename -> filename'
    with
      fn := <get-filename> filename
    ; src-gen-path := <concat-strings> [project-path, "/src-gen"]
    ; src-gen-folder := <concat-strings> [src-gen-path, "/" ,folder]
    ; file-folder := <get-dir(|src-gen-folder)> filename
    ; filename' := <concat-strings> [file-folder, "/" , fn, ext]

strategies

  pp-gzbc =
      parenthesize-gazebo-core
    ; prettyprint-gazebo-core-start-symbols
    ; !V([], <id>)
    ; box2text-string(|120)

strategies

  nsid-name-part: NSIDNamePart(name) -> name 
  nsid-name-part: NSIDNamePartVerbatim(verb) -> verb
  nsid-name-list: NSIDName(parts) -> <map(nsid-name-part)> parts

  identf-from-nsid: NSIDiFull(ns, names) -> IdentFull-C(ns, names)
  identf-from-nsid: NSID(ns, name) -> IdentFull-C(ns, <nsid-name-list> name)
  identf-from-nsid: other -> <identf-from-nsid> ref
    where
      analysis := <stx-get-ast-analysis> other
    ; ref := <stx-get-ast-ref(|analysis)> other

  generate-gzbc: StartModule(mod, uses, tlis) -> Start-C(<identf-from-nsid> mod, [])
  generate-gzbc: StartInject(mod, uses, tlis) -> <generate-gzbc> StartModule(mod, uses, tlis)

  generate-gzbc-shared: input@(selected, _, ast, path, project-path) -> (filename, result)
    where
      filename := <get-src-gen(|project-path, "gzb-interm", ".aterm-speed.gzbc")> "a/b"
    ; result := <generate-gzbc> ast

  generate-gzbc-local: input@(_, _, ast, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"gzbc")> path
    ; result := <generate-gzbc; pp-gzbc> ast
