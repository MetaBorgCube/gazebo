module transform

imports

  signatures/gazebo-core/-
  signatures/gazebo/-
  signatures/-

  statix/api

  common

rules // transform-tli :: Tli -> Tli-C

  transform-tli: Alias(Selector(name, _), Selector(_, props)) ->
    Mixin-C(name, <opt-map(transform-props); opt-unwrap(!Props-C([]))> props)

  // TODO: transform-tli: GlobalAlias(_, _)

  transform-tli: FnBlock(FnSpec(tags, mods, name, sign), block) -> Function-C(name, <transform-sign> sign, <transform-block> block)

  transform-tli: FnExt(name, sign) -> FunctionExt-C(name, <transform-sign> sign)

  // using known case for Decl in transform-stmt, so casting is OK
  transform-tli: decl@Decl(_, _, _) -> <transform-stmt> decl

  transform-tli: TypeDecl(name, t) -> TypeDecl-C(name, <transform-type> t)

rules // transform-props :: Props -> Props-C

  transform-props: Props(props) -> Props-C(<map(transform-prop)> props)

  transform-prop: KvProp(k, v) -> PropKv-C(k, <transform-expr> v)
  transform-prop: CmpProp(k, op, r) -> PropCmp-C(k, <transform-compare> op, <transform-expr> r)
  transform-prop: MapProp(k, entries) -> PropMap-C(k, entries')
    with
      entries' := <map(
        \KvMapProp(k, v) -> PropMapEntryKv-C(k, <transform-expr> v)\
      + \CmpMapProp(k, op, v) -> PropMapEntryCmp-C(k, <transform-compare> op, <transform-expr> v)\
      )> entries

rules // transform-sign :: Sign -> Signature-C

  transform-sign: Sign(params, retspec)
    -> Signature-C(params', <opt-map(?RetSpec(<id>)); opt-unwrap(!TypeVoid()); transform-type> retspec)
    with
      params' := <
        opt-map(?Params(<id>))
      ; opt-unwrap(![])
      ; map((\ ParamGroup(params*, t_p) ->
          <map({p_kind :
            (\ Param(p_mod, name) ->
              Param-C(p_kind, name, <transform-type> t_p)
                with
                  // from syntax, p_mod is know to be either empty or have the const modifier
                  if <?[]> p_mod
                    then !ParamKindVal-C()
                    else !ParamKindConst-C()
                  end => p_kind
            \)
          })> params*
        \))
      ; flatten-list
      > params

rules // transform-type :: Type -> Type-C

  transform-type: TypeRef(nsid) -> TypeRef-C(<identf-from-nsid> nsid)

  transform-type: TypeString() -> TypeString-C()
  transform-type: TypeBool() -> TypeBool-C()
  transform-type: TypeInt() -> TypeInt-C()
  transform-type: TypeFloat() -> TypeFloat-C()

  transform-type: TypePos(kind, t) -> TypePos-C(kind', <transform-type> t)
    with
      kind' := <
        (PosAbs() -> PosKindAbs-C())
      + (PosRel() -> PosKindRel-C())
      + (PosLoc() -> PosKindLoc-C())
      + (PosAny() -> PosKindAny-C())
      > kind

  transform-type: TypeResourceRegistry(nsid) -> TypeResourceRegistry-C(<identf-from-nsid> nsid)
  transform-type: TypeTag() -> TypeTag-C()

  transform-type: TypeSelector() -> TypeSelector-C()

  transform-type: TypeArrayDynamic(t) -> TypeArrayDynamic-C(<transform-type> t)
  transform-type: TypeArrayFixedAnonymous(t, n) -> TypeArrayFixedAnonymous-C(<transform-type> t, n)
  transform-type: TypeArrayFixedNamed(t, names) -> TypeArrayFixedNamed-C(<transform-type> t, names)
  transform-type: TypeListDynamic(t) -> TypeListDynamic-C(<transform-type> t)
  transform-type: TypeListFixedAnonymous(t, n) -> TypeListFixedAnonymous-C(<transform-type> t, n)
  transform-type: TypeListFixedNamed(t, names) -> TypeListFixedNamed-C(<transform-type> t, names)

  transform-type: TypeEnumTyped(t, membs) ->
    TypeEnum-C(<transform-type> t, <map(\EnumTypedMemb(name, e) -> EnumMemb-C(name, <transform-expr> e)\)> membs)

  transform-type: TypeInterfaceCompose(bases, membs) ->
    TypeInterface-C(<map(transform-type)> bases, <map(\InterfaceMember(name, t) -> InterfaceMemb-C(name, <transform-type> t)\)> membs)

  transform-type: TypeBottom() -> TypeBottom-C()
  transform-type: TypeVoid() -> TypeVoid-C()

rules // transform-expr :: Expr -> Expr-C

  transform-expr: NBTCompound(kvs) ->
    NbtCompound-C(<map(\KeyValue(k, v) -> NbtCompoundEntry-C(k, <transform-expr> v)\)> kvs)
  transform-expr: NBTArrayAnonymous(items) -> NbtArray-C(<map(transform-expr)> items)
  // TODO: might want to keep the type info?
  transform-expr: NBTArrayExplicit(_, items) -> NbtArray-C(<map(transform-expr)> items)
  transform-expr: NBTList(items) -> NbtList-C(<map(transform-expr)> items)

  transform-expr: sel@Selector(base, props) ->
    Selector-C(bases, <opt-map(transform-props); opt-unwrap(!Props-C([]))> props)
    with
      a := <stx-get-ast-analysis> sel
    ; s_sel := <stx-get-ast-type(|a); ?SELECTOR(<id>)> sel
    // TODO: stop when a global alias is reached
    ; bases := <rec x(\s -> [
                  <stx-get-scopegraph-data(|a, "statics/common!name_rel"); ?[<id>]> s
                | <(stx-get-scopegraph-edges(|a, "statics/common!A"); ?[<id>]; x) <+ ![]> s
              ]\); reverse> s_sel

  transform-expr: Tag(nsid) -> TagInst-C(Tag-C(<identf-from-nsid> nsid))

  transform-expr: ResourceFull(ident, props, payl) -> ResInst-C(ResourcePropsPayl-C(id_registry, id_registration, <transform-props> props, <transform-expr> payl))
    with
      a := <stx-get-ast-analysis> ident
    ; id_registry := <stx-get-ast-property(|a, "registry_full"); identf-from-nsid> ident
    ; id_registration := <stx-get-ast-property(|a, "registration_full"); identf-from-nsid> ident

  transform-expr: String(str) -> String-C(str)
  transform-expr: BoolT() -> BoolT-C()
  transform-expr: BoolF() -> BoolF-C()
  transform-expr: NumI(v) -> NumI-C(v)
  transform-expr: NumF(v) -> NumF-C(v)

  transform-expr: Raw(parts) -> Raw-C(parts')
    with
      parts' := <map(
        \InterpolateID(ref) -> RawFormat-C(None(), <transform-expr> ref)\
      + \InterpolateExpr(e) -> RawFormat-C(None(), <transform-expr> e)\
      + \InterpolateConfigured(config, e) -> RawFormat-C(Some(config), <transform-expr> e)\
      + \RawPart(str) -> RawText-C(<string-denorm> str)\
      )> parts

  transform-expr: Ref(nsid) -> ref'
    with
      ref' := <
        identf-from-nsid
      ; !RefFull-C(<id>)
     <+ ?NSIDRel(NSIDName([NSIDNamePart(<id>)]))
      ; !RefLocal-C(IdentLocal-C(<id>))
     > nsid

  transform-expr: FindIndex(e, i) -> FindIndex-C(<transform-expr> e, <transform-expr> i)
  transform-expr: FindPath(e, memb) -> FindPath(<transform-expr> e, memb)

  transform-expr: InvokeArgs(e, Args(args)) -> Invoke-C(<transform-expr> e, <map(transform-expr)> args)

  transform-expr: Mul(l, r) -> Mul-C(<transform-expr> l, <transform-expr> r)
  transform-expr: Div(l, r) -> Div-C(<transform-expr> l, <transform-expr> r)
  transform-expr: Mod(l, r) -> Mod-C(<transform-expr> l, <transform-expr> r)
  transform-expr: Add(l, r) -> Add-C(<transform-expr> l, <transform-expr> r)
  transform-expr: Sub(l, r) -> Sub-C(<transform-expr> l, <transform-expr> r)

  transform-expr: And(l, r) -> And-C(<transform-expr> l, <transform-expr> r)
  transform-expr: Or(l, r) -> Or-C(<transform-expr> l, <transform-expr> r)
  transform-expr: Not(e) -> Not-C(<transform-expr> e)
  transform-expr: Cmp(l, op, r) -> Cmp-C(<transform-expr> l, <transform-compare> op, <transform-expr> r)

  transform-expr: RangeFull(l, h) -> Range-C(<transform-expr> l, <transform-expr> h)

  transform-expr: Vec(x, y, z) -> Position-C(kind, <transform-vec-elem> x, <transform-vec-elem> y, <transform-vec-elem> z)
    with
      switch ![x, y, z]
        case fetch(?VecElemRel(_)): !PositionKindRel-C()
        case fetch(?VecElemLoc(_)): !PositionKindLoc-C()
        otherwise: !PositionKindAbs-C()
      end => kind

  transform-expr: ConstructExplicit(t, ConstructEnum(key)) -> EnumRefExplicit-C(<transform-type> t, key)
  transform-expr: ConstructInfer(ConstructEnum(key)) -> EnumRefImplicit-C(key)

  // explicit type hint for NBT is only relevant during first analysis because hints need to be propagated, but this information is not relevant later on
  transform-expr: ConstructExplicit(_, ConstructNBT(nbt)) -> <transform-expr> nbt
  transform-expr: ConstructInfer(ConstructNBT(nbt)) -> <transform-expr> nbt

rules // transform-block :: Block -> Block-C

  transform-block: Block(stmt*) -> Block-C(<filter(not(?Noop())); map(transform-stmt)> stmt*)

rules // transform-stmt :: Statement -> Statement-C

  transform-stmt =
    (?ExecChain(_, _) + ?ExecFin(_, _))
  ; rec x(
      \ExecChain(frag, next) -> [<transform-exec-frag> frag | <x> next]\
    + \ExecFin(frag, block) -> [<transform-exec-frag> frag] with fin_block := block\
    )
  ; !ExecuteStmt-C(<id>, <transform-block> fin_block)

  transform-stmt: InvokeStmt(ivk) -> DiscardStmt-C(<transform-expr> ivk)

  transform-stmt: Decl(mod*, name, e) -> Decl-C(kind, name, <transform-expr> e)
    with
      switch !mod*
        case fetch(?DmodMut()): !DeclKindVar-C()
        case fetch(?DmodConst()): !DeclKindConst-C()
        otherwise: !DeclKindVal-C()
      end => kind

  transform-stmt: ForWhile(cond, block) -> LoopStmt-C(<transform-expr> cond, <transform-block> block)
  transform-stmt: ForIn(dst*, src, block) -> IterateStmt-C(<transform-expr> src, dst*, <transform-block> block)
  transform-stmt: Break() -> BreakStmt-C()

  transform-stmt: If(cond, b_true, ElseBlock(b_false)) -> IfStmt-C(<transform-expr> cond, <transform-block> b_true, <transform-block> b_false)

  transform-stmt: Match(subj, case*) ->
    MatchStmt-C(
      <transform-expr> subj, 
      <filter(?Case(_, _)); map(\Case(e, block) -> MatchCase-C(<transform-expr> e, <transform-block> block)\)> case*,
      <getfirst(?CaseDefault(<transform-block>)) <+ !Block-C([])> case*
    )

  transform-stmt: ReturnEmpty() -> ReturnVoidStmt-C()
  transform-stmt: ReturnValue(e) -> ReturnExprStmt-C(<transform-expr> e)

  transform-stmt: AssignEq(dst, e) -> AssignStmt-C(<transform-expr> dst, AssignOperatorEq(), <transform-expr> e)
  transform-stmt: AssignAdd(dst, e) -> AssignStmt-C(<transform-expr> dst, AssignOperatorAdd(), <transform-expr> e)
  transform-stmt: AssignSub(dst, e) -> AssignStmt-C(<transform-expr> dst, AssignOperatorSub(), <transform-expr> e)
  transform-stmt: AssignMul(dst, e) -> AssignStmt-C(<transform-expr> dst, AssignOperatorMul(), <transform-expr> e)
  transform-stmt: AssignDiv(dst, e) -> AssignStmt-C(<transform-expr> dst, AssignOperatorDiv(), <transform-expr> e)
  transform-stmt: AssignMod(dst, e) -> AssignStmt-C(<transform-expr> dst, AssignOperatorMod(), <transform-expr> e)

  transform-stmt: RawStmt(raw) -> DiscardStmt-C(<transform-expr> raw)

rules // transform-compare :: Compare -> Compare-C

  transform-compare: CmpGt() -> CmpGt-C()
  transform-compare: CmpGte() -> CmpGte-C()
  transform-compare: CmpLt() -> CmpLt-C()
  transform-compare: CmpLte() -> CmpLte-C()
  transform-compare: CmpEqual() -> CmpEqual-C()
  transform-compare: CmpNotEqual() -> CmpNotEqual-C()
  transform-compare: CmpEquiv() -> CmpEquiv-C()
  transform-compare: CmpIs() -> CmpIs-C()
  transform-compare: CmpMatches() -> CmpMatches-C()

rules // transform-vec-elem :: VecElem -> PositionCoord-C

  transform-vec-elem: VecElemAbs(e) -> PositionCoord-C(PositionCoordKindAbs-C(), <transform-expr> e)
  transform-vec-elem: VecElemRel(e) -> PositionCoord-C(PositionCoordKindDyn-C(), <transform-expr> e)

rules // transform-exec-anchor :: ExecAnchor -> ExecuteAnchor-C

  transform-exec-anchor: AnchorEyes() -> AnchorEyes-C()
  transform-exec-anchor: AnchorFeet() -> AnchorFeet-C()

rules // transform-rotation :: Rotation -> Rotation-C

  transform-rotation: Rotation(yaw, pitch) -> Rotation-C(yaw'-kind, yaw'-e, pitch'-kind, pitch'-e)
    with
      ((yaw'-kind, yaw'-e), (pitch'-kind, pitch'-e)) := <all(
        \RotAbs(e) -> (RotationKindAbs-C(), <transform-expr> e)\
      + \RotRel(e) -> (RotationKindRel-C(), <transform-expr> e)\
      )> (yaw, pitch)

rules // transform-exec-frag :: ExecFrag -> ExecuteFragment-C

  transform-exec-frag: ExecAlign(e) -> ExecuteAlign-C(<transform-expr> e)
  transform-exec-frag: ExecAnchored(anchor) -> ExecuteAnchored-C(<transform-exec-anchor> anchor)
  transform-exec-frag: ExecAs(e) -> ExecuteAs-C(<transform-expr> e)
  transform-exec-frag: ExecAt(e) -> ExecuteAt-C(<transform-expr> e)
  transform-exec-frag: ExecFacingPos(e) -> ExecuteFacingPos-C(<transform-expr> e)
  transform-exec-frag: ExecFacingEntity(e, anchor) -> ExecuteFacingEntity-C(<transform-expr> e, <transform-exec-anchor> anchor)
  transform-exec-frag: ExecIn(e) -> ExecuteIn-C(<transform-expr> e)
  transform-exec-frag: ExecPositionedPos(e) -> ExecutePositionedPos-C(<transform-expr> e)
  transform-exec-frag: ExecPositionedAs(e) -> ExecutePositionedAs-C(<transform-expr> e)
  transform-exec-frag: ExecRotated(rot) -> ExecuteRotated-C(<transform-rotation> rot)
  transform-exec-frag: ExecRotatedAs(e) -> ExecuteRotatedAs-C(<transform-expr> e)
