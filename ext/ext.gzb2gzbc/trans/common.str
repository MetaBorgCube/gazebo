module common

imports

  signatures/gazebo-core/-
  signatures/gazebo/-
  // BUG: this would have been sufficient (below), but transitive imports are not so great for source deps apparently
  signatures/-

  statix/api

  libspoofax/-

  str_common

signature

  sorts

    NSIDi
    TYPE

  constructors

    NSIDiFull  : string * List(string) -> NSIDi
    NSIDiShort :          List(string) -> NSIDi
    NSIDiRel   :          List(string) -> NSIDi

    StartInject : NSIDi * List(Use) * List(Tli) -> Start

    /** Statix spec types */
    SELECTOR : Stx-Scope -> TYPE

strategies

  pp-gzb = call-in-language(|"gazebo", "pp-gazebo-string")

  pp-gzbc = call-in-language(|"gazebo-core", "pp-gazebo-core-string")

strategies

  relevant-tli =
    ?Alias(_, _)
  //+ ?GlobalAlias(_, _)
  + ?FnBlock(_, _)
  + ?FnExpr(_, _)
  + ?FnExt(_, _)
  + ?Decl(_, _, _)
  + ?DynamicRegistry(_)
  + ?StaticRegistry(_, _)
  + ?TypeDecl(_, _)
  // TODO: add more as more transformations are implemented

rules

  nsid-name-part: NSIDNamePart(name) -> name 
  nsid-name-part: NSIDNamePartVerbatim(verb) -> verb
  nsid-name-list: NSIDName(parts) -> <map(nsid-name-part)> parts

  identf-from-nsid: NSIDiFull(ns, names) -> IdentFull-C(ns, names)
  identf-from-nsid: NSID(ns, name) -> IdentFull-C(ns, <nsid-name-list> name)
  identf-from-nsid: other -> identf
    where
      analysis := <stx-get-ast-analysis>
    ; identf := <
        stx-get-ast-property(|analysis, "full")
      ; identf-from-nsid
     <+ stx-get-ast-ref(|analysis)
      ; identf-from-nsid
      > other

strategies // is-simple-type :: Type -> id

  is-simple-type =
    ?TypeString()
  + ?TypeBool()
  + ?TypeInt()
  + ?TypeFloat()

strategies // stx-get-scopegraph-data-ext(|Analysis, relation:string) :: Scope -> List(any)

  // Workaround for metaborg/nabl#94, see: https://slde.slack.com/archives/C7254SF60/p1649660409194699
  stx-get-scopegraph-data-ext(|a, rel) = ?s
  ; stx-get-scopegraph-data(|a, rel)
  ; try(
      ?[]; !s
      // extract the resource identifier from the scope and drop the "/./" prefix
    ; where(Scope(string-as-chars(drop(|3)) => resource, id))
      // attempt to retrieve the analysis state from the extenal scope
    ; where(
        a' := <stx-get-ast-analysis> (){TermIndex(resource, -1)}
        // try also with "data/" prefix, because in standalone env
        //  all sources files are actually relative to the data folder
        //  (THIS IS PROBABLY ALSO A BUG: one would expect the path to be consistent)
     <+ a' := <stx-get-ast-analysis> (){TermIndex(<concat-strings> ["data/", resource], -1)}
      )
      // execute in the external context
    ; stx-get-scopegraph-data(|a', rel)
    )

strategies // strip-numeric-suffix :: String -> String

  /** Strips the last char from a string if it is a letter.
    * Intended to be used to drop the numeric suffix e.g. from long (1L -> 1). */
  strip-numeric-suffix =
    string-as-chars(at-last(try(
      is-alpha
    ; ![]
    )))
