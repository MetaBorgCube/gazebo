module desugar

imports

  signatures/gazebo-core/-
  signatures/llmc/-
  signatures/-

  common

strategies

  tli-add =
    ?tli
  ; rules( TliAdd:+ _ -> tli )

strategies

  with-added-tlis(s) =
    {| TliAdd
    : s
    ; ![<bagof-TliAdd; reverse <+ ![]>(), <id>]
    ; concat
    |}

  desugar-all(|base) =
    {| MixinLookup, DesugarBase
    : with(rules(DesugarBase := base))
    ; with-added-tlis(map(try(desugar-mixin)))
    ; with-added-tlis(map(bottomup(try(desugar)); bottomup(try(flatten-block))))
    |}

rules

  flatten-block =
    Block-C(
      map(try(\Block-C(stmts) -> stmts\))
    ; flatten-list
    )

rules

  /*
  mixin MyMixin [tag = "example", level > 5+6]
  const my_sel := @(e, MyMixin, [])
  -->
  const _mixin$MyMixin$level0 := 5 + 6
  typeof :(ns, name _mixin$MyMixin$level0) = __UNK
  const my_sel := @(e, [tag = "example", level > _mixin$MyMixin$level0])
  */

  desugar-mixin-prop-lift(|ident_base): e -> e'
    with
      if is-lit-or-ref then
        e' := e
      else
        ident := <newname> ident_base
      ; e' := RefLocal-C(IdentLocal-C(ident))
      ; <tli-add> Decl-C(DeclKindConst-C(), ident, TypeUnk-C(), e)
      ; <tli-add> TypeofGlobal-C(<identf-from-base(|<DesugarBase>)> ident, TypeUnk-C())
      end

  desugar-selector-prop(|name): PropKv-C(k, v) ->
    PropKv-C(k, <desugar-mixin-prop-lift(|$[[name]$[k]])> v)
  desugar-selector-prop(|name): PropCmp-C(k, cmp, v) ->
    PropCmp-C(k, cmp, <desugar-mixin-prop-lift(|$[[name]$[k]])> v)
  desugar-selector-prop(|name): PropMap-C(k, entries) ->
    PropMap-C(k, <desugar-mixin-prop-entry(|name, k)> entries)

  desugar-mixin-prop-entry(|name, k): PropMapEntryKv-C(map_k, map_v) ->
    PropMapEntryKv-C(map_k, <desugar-mixin-prop-lift(|$[[name]$[map_k]])> map_v)
  desugar-mixin-prop-entry(|name, k): PropMapEntryCmp-C(map_k, cmp, map_v) ->
    PropMapEntryCmp-C(map_k, cmp, <desugar-mixin-prop-lift(|$[[name]$[map_k]])> map_v)

  desugar-mixin: m@Mixin-C(name, Props-C(props)) -> m
    with
      props' := <map(desugar-selector-prop(|$[_mixin$[name]]))> props
    ; name' := <strip-annos> name
    ; rules(MixinLookup: name' -> props')

rules // destruction: desugar-destruct(|List(string)) :: Expr-C -> List(Statement-C)

  // single variable destruction: simply move
  desugar-destruct(|[ident]): e ->
    [
      Decl-C(DeclKindVal-C(), ident, TypeUnk-C(), e)
    ]

  // multi variable destruction: access by index
  desugar-destruct(|destruction): e -> decls
    where
      <geq> (<length => len> destruction, 2)
    with
      decls := <map(\(i, ident) ->
        Decl-C(DeclKindVal-C(), ident, TypeUnk-C(), FindIndex-C(e, NumI-C(<int-to-string> i)))
      \)> destruction

rules // statement desugaring

  // NOTE: works for lists and arrays ONLY
  desugar: IterateStmt-C(subj, destruction, block) ->
    Block-C([
      // loop flag
      Decl-C(DeclKindVar-C(), ident_flag, TypeBool-C(), <desugar> BoolT-C()),
      // loop subject
      Decl-C(DeclKindVar-C(), ident_subj, TypeUnk-C(), subj),
      LoopStmt-C(
        ref_flag,
        Block-C([IfStmt-C(
          // if __count(subj) > 0
          Cmp-C(Count-C(ref_subj), CmpGt-C(), NumI-C("0")),
          // ... then
          Block-C([
            // get subj[0]
            Decl-C(DeclKindVal-C(), ident_curr, TypeUnk-C(), FindIndex-C(ref_subj, NumI-C("0"))),
            // del subj[0]
            DeleteStmt-C(FindIndex-C(ref_subj, NumI-C("0"))),
            // destruct value
            destruct*,
            // continue to original loop body
            block
          ]),
          // ... else: set flag to false
          Block-C([AssignStmt-C(ref_flag, AssignOperatorEq-C(), <desugar> BoolF-C())])
        )])
      )
    ])
    with
      ident_base := <newname> "_iterLA"
    ; [ident_subj, ident_curr, ident_flag] :=
        <map(![ident_base, "$", <id>]; concat-strings)> ["subj", "curr", "flag"]
    ; [ref_subj, ref_curr, ref_flag] :=
        <map(!RefLocal-C(IdentLocal-C(<id>)))> [ident_subj, ident_curr, ident_flag]
    with
      destruct* := <desugar-destruct(|destruction)> ref_subj

  desugar: MatchStmt-C(subj, cases, default_case) ->
    Block-C([
      Decl-C(DeclKindVal-C(), ident, TypeUnk-C(), subj),
      <foldl(\(MatchCase-C(case_value, case_block), else_branch) ->
        IfStmt-C(
          Cmp-C(
            RefLocal-C(IdentLocal-C(ident)),
            CmpEqual-C(),
            case_value
          ),
          case_block,
          else_branch
        )
      \)> (<reverse> cases, default_case)
    ])
    with
      ident := <newname> "_match$subj"

rules // expression desugaring

  desugar: BoolT-C() -> NumB-C("1")
  desugar: BoolF-C() -> NumB-C("0")

  desugar: Selector-C([base | mixins], Props-C(props), t) -> Selector-C([base], Props-C(props'), t)
    with
      mixed_in_props := <map(strip-annos; MixinLookup); flatten-list> mixins
    ; desugared_props := <map(desugar-selector-prop(|"_sel_anon"))> props
    ; props' := <concat> [mixed_in_props, desugared_props]
