module common

imports

  signatures/gazebo-core/-
  signatures/gazebo/-
  // BUG: this would have been sufficient (below), but transitive imports are not so great for source deps apparently
  signatures/-

  libspoofax/-

  str_common

strategies

  pp-gzbc = call-in-language(|"gazebo-core", "pp-gazebo-core-string")

  pp-llmc = call-in-language(|"llmc", "pp-llmc-string")

strategies

  relevant-tli =
    ?TypeofGlobal-C(_, _)
  + ?Function-C(_, _, _, _)
  + ?Decl-C(_, _, _, _)

  is-lit-or-ref =
    ?String-C(_)
  + ?BoolT-C()
  + ?BoolF-C()
  + ?NumB-C(_)
  + ?NumS-C(_)
  + ?NumI-C(_)
  + ?NumL-C(_)
  + ?NumF-C(_)
  + ?NumD-C(_)
  + ?RefFull-C(_)
  + ?RefLocal-C(_)

rules // nsid-ensure-valid :: string -> string

  nsid-ensure-valid =
    explode-string
  ; map(try(
      \<is-upper> -> ['-', <to-lower>]\
    + \'$' -> ['-', '-']\
    ))
  ; flatten-list
  ; implode-string

rules // nsid-from-identf :: IdentFull-C -> NSID-LL

  nsid-from-identf: IdentFull-C(ns, name) -> NSID-LL(ns, name)

rules // nsid-from-base(|[ns | basename]) :: a | List(a) -> NSID-LL

  nsid-from-base(|[ns | basename]): name -> NSID-LL(ns, <concat; map(nsid-ensure-valid)> [basename, name])
    where is-list
  nsid-from-base(|base): name -> <nsid-from-base(|base)> [name]
    where not(is-list)
