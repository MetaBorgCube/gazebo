module type-ctype

imports

imports

  signatures/gazebo-core/-
  // BUG: this would have been sufficient (below), but transitive imports are not so great for source deps apparently
  signatures/-

  common

  cnsid
  ctype
  str_common

strategies

  type-compat = where(
    (type-to-ctype, type-to-ctype)
  ; ctype-compat
  )

rules

  type-to-ctype: TypeRef-C(i) -> CTypeRef(<string-to-int> i)

  type-to-ctype: TypeString-C() -> CTypeString()
  type-to-ctype: TypeBool-C() -> CTypeBool()
  type-to-ctype: TypeLong-C() -> CTypeIntL()
  type-to-ctype: TypeInt-C() -> CTypeIntI()
  type-to-ctype: TypeShort-C() -> CTypeIntS()
  type-to-ctype: TypeByte-C() -> CTypeIntB()
  type-to-ctype: TypeDouble-C() -> CTypeFloatD()
  type-to-ctype: TypeFloat-C() -> CTypeFloatS()

  type-to-ctype: TypePos-C(kind, t) ->
    CTypePos(
      <switch id
        case ?PosKindAny-C(): !CTypePosAny()
        case ?PosKindAbs-C(): !CTypePosAbs()
        case ?PosKindLoc-C(): !CTypePosLoc()
        case ?PosKindRel-C(): !CTypePosRel()
      end> kind
    , <type-to-ctype> t
    )

  type-to-ctype: TypeResourceRegistry-C(IdentFull-C(ns, name)) -> CTypeRes(CNSID(ns, name))
  type-to-ctype: TypeTag-C() -> CTypeTag()

  type-to-ctype: TypeSelector-C() -> CTypeSelector()

  type-to-ctype: TypeListDynamic-C(refc, t) -> CTypeList(<type-to-ctype--refc> refc, <type-to-ctype> t)
  type-to-ctype: TypeArrayDynamic-C(refc, t) -> CTypeArray(<type-to-ctype--refc> refc, <type-to-ctype> t)

  // wrap enums in a generic holder, no other treatment necessary
  type-to-ctype =
    (?TypeEnumInt-C(_) + ?TypeEnumString-C(_))
  ; !CTypeArbitraryConstant(<id>)

  type-to-ctype: TypeInterface-C(refc, entries) ->
    CTypeCompound(
      <type-to-ctype--refc> refc
    , <map(\InterfaceMemb-C(k, t) -> CTypeCompoundEntry(k, <type-to-ctype> t)\)> entries
    )

  type-to-ctype: TypeUnk-C() -> CTypeUnk()
  type-to-ctype: TypeBottom-C() -> CTypeBottom()
  type-to-ctype: TypeVoid-C() -> CTypeVoid()

  type-to-ctype--refc =
    opt-map(\TypeRefCreate-C(i) -> CTypeRefCreate(<string-to-int> i)\)

rules

  type-from-ctype = ?CTypeArbitraryConstant(<id>)

  type-from-ctype: CTypeRef(i) -> TypeRef-C(<int-to-string> i)

  type-from-ctype: CTypeString() -> TypeString-C()
  type-from-ctype: CTypeBool() -> TypeBool-C()
  type-from-ctype: CTypeIntL() -> TypeLong-C()
  type-from-ctype: CTypeIntI() -> TypeInt-C()
  type-from-ctype: CTypeIntS() -> TypeShort-C()
  type-from-ctype: CTypeIntB() -> TypeByte-C()
  type-from-ctype: CTypeFloatD() -> TypeDouble-C()
  type-from-ctype: CTypeFloatS() -> TypeFloat-C()

  type-from-ctype: CTypePos(kind, t) ->
    TypePos-C(
      <switch id
        case ?CTypePosAny(): !PosKindAny-C()
        case ?CTypePosAbs(): !PosKindAbs-C()
        case ?CTypePosLoc(): !PosKindLoc-C()
        case ?CTypePosRel(): !PosKindRel-C()
      end> kind
    , <type-from-ctype> t
    )

  type-from-ctype: CTypeRes(CNSID(ns, name)) -> TypeResourceRegistry-C(IdentFull-C(ns, name))
  type-from-ctype: CTypeTag() -> TypeTag-C()

  type-from-ctype: CTypeSelector() -> TypeSelector-C()

  type-from-ctype: CTypeList(refc, t) -> TypeListDynamic-C(<type-from-ctype--refc> refc, <type-from-ctype> t)
  type-from-ctype: CTypeArray(refc, t) -> TypeArrayDynamic-C(<type-from-ctype--refc> refc, <type-from-ctype> t)

  // enum: see top of section, where it should be lifted out of the constant type container

  type-from-ctype: CTypeCompound(refc, entries) ->
    TypeInterface-C(
      <type-from-ctype--refc> refc
    , <map(\CTypeCompoundEntry(k, t) -> InterfaceMemb-C(k, <type-from-ctype> t)\)> entries
    )

  type-from-ctype: CTypeUnk() -> TypeUnk-C()
  type-from-ctype: CTypeBottom() -> TypeBottom-C()
  type-from-ctype: CTypeVoid() -> TypeVoid-C()

  type-from-ctype--refc =
    opt-map(\CTypeRefCreate(i) -> TypeRefCreate-C(<int-to-string> i)\)
