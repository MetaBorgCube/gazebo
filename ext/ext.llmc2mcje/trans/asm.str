module asm

imports

  common
  str_common

/**
 * NOTE:
 * Being at "top level" means not being inside an argument, for all practical purposes.
 */

signature

  sorts Unit-ASM Command-ASM Arg-ASM
  constructors
    /** base unit */
    Unit-ASM : List(Command-ASM) -> Unit-ASM
    /** plain command, without formatting */
    Command-Plain-ASM : string * List(Arg-ASM) -> Command-ASM
    /** call with GZB calling convention. the arg identifies where the arguments were set */
    Command-CallGzb-ASM : NSID * List(Arg-ASM) -> Command-ASM
    /** anonymous sub-unit (assembled in new function file x:y/z, expanded to 'function x:y/z') */
    Command-AnonSubUnit-ASM : Unit-ASM -> Command-ASM
    /** callable sub-unit (assembled similar to AnonSubUnit, but referenceable) */
    Command-CallableSubUnit-ASM : string * Unit-ASM -> Command-ASM
    /** call callable sub unit */
    Command-CallSubUnit-ASM : string -> Command-ASM
    /** no-op */
    Command-NoOp-ASM : Command-ASM
    /** command self-redirection (e.g. 'execute if abc' -> 'if xyz'), mainly used for execute chains */
    Arg-RedirectSelf-ASM : List(Arg-ASM) -> Arg-ASM
    /** general command redirection (e.g. 'execute ... run' -> 'say hi') */
    Arg-Redirect-ASM : Command-ASM -> Arg-ASM
    /** generic NSID arg */
    Arg-NSID-ASM : NSID -> Arg-ASM
    /** raw string part, anything allowed */
    Arg-RawString-ASM : string -> Arg-ASM

strategies // asm(|NSID) :: Unit-ASM

  asm(|function_base) =
    {| BaseNSID, EmitFunction
    : with(rules(BaseNSID: _ -> function_base))
    ; asm-unit(true|"", "")
    ; <bagof-EmitFunction; reverse <+ ![]>()
    |}

strategies // asm-unit(is-toplevel) :: Unit-ASM -> string(nsid)

  asm-unit(is-toplevel) = asm-unit(is-toplevel|"")

  asm-unit(is-toplevel|key) = asm-unit(is-toplevel|key, <newname> "-anon-")

  asm-unit(is-toplevel|key,name) = ?Unit-ASM(<id>)
  ; with(
      unit_id := <concat-strings> [<BaseNSID; asm-nsid>, "/", name]
    ; if <not(?"")> key then rules(UnitLookup: key -> unit_id) end
    )
  ; map(asm-command(is-toplevel))
  ; try(wrap-gzb-callee(|name))
  ; intersperse-concat(|"\n") => content
  ; rules(EmitFunction:+ _ -> (name, content))
  ; !unit_id

  wrap-gzb-callee(|""): commands* -> [pre*, commands*, post*]
    with
      pre* := [
        // push stack frame. storage container and path don't need to exist yet, will be created implicitly
        "data modify storage gzb:_internal _stack append value {}"
      ]
    ; post* := [
        // pop stack frame
        "data remove storage gzb:_internal _stack[-1]"
      ]

rules // asm-command(is-toplevel) :: Command-ASM -> string

  asm-command(is-toplevel): Command-Plain-ASM(cmd, args) -> <concat-strings> [cmd, " ", res]
    with
      res := <map(asm-arg); intersperse-concat(|" ")> args

  asm-command(is-toplevel): Command-CallGzb-ASM(nsid@NSID(ns, name), arg_area) -> <intersperse-concat(|"\n")> [pre*, call, post*]
    with
      BaseNSID; ?NSID(base_ns, base_name)
    ; area_access_curr* := [
        "storage",
        <asm-nsid> NSID(<concat-strings> [base_ns, ".__temp__"], base_name),
        <string-denorm> "args"
      ]
    ; area_access_callee* := [
        "storage",
        <asm-nsid> NSID(<concat-strings> [ns, ".__temp__"], name),
        <string-denorm> "args"
      ]
    ; pre* := [
        // store the current args on the stack
        <intersperse-concat(|" ")> [
          "data modify",
          "storage gzb.__temp__:_internal _stack[-1].\"$args_save\"",
          "set from",
          area_access_curr*
        ],
        // prepare the args are for the callee
        <flatten-list; intersperse-concat(|" ")> [
          "data modify",
          area_access_callee*,
          "set from",
          <map(asm-arg)> arg_area
        ]
      ]
    ; call := <intersperse-concat(|" ")> ["function", <asm-nsid> nsid]
    ; post* := [
        // restore the args from the stack
        <intersperse-concat(|" ")> [
          "data modify",
          area_access_curr*,
          "set from",
          "storage gzb.__temp__:_internal _stack[-1].\"$args_save\""
        ]
      ]

  asm-command(is-toplevel): Command-AnonSubUnit-ASM(unit@Unit-ASM(commands)) -> res
    with
      if is-toplevel then
        // flatten the sub unit if still at top level
        res := <map(asm-command(is-toplevel)); intersperse-concat(|"\n")> commands
      else
        res := <intersperse-concat(|" ")> ["function", <asm-unit(true)> unit]
      end

  asm-command(is-toplevel): Command-CallableSubUnit-ASM(key, unit) -> res
    with
      res := <intersperse-concat(|" ")> ["function", <asm-unit(true|key)> unit]

  asm-command(is-toplevel): Command-CallSubUnit-ASM(key) -> res
    with
      res := <intersperse-concat(|" ")> ["function", <UnitLookup> key]

  asm-command(is-toplevel): Command-NoOp-ASM() -> "#no op"

  asm-command(is-toplevel): str -> str
    where is-string

rules // asm-arg :: Arg-ASM -> string

  asm-arg: Arg-RedirectSelf-ASM(args) -> res
    with
      res := <map(asm-arg); intersperse-concat(|" ")> args

  asm-arg: Arg-Redirect-ASM(cmd) -> res
    with
      res := <asm-command(false)> cmd

  asm-arg: Arg-NSID-ASM(nsid) -> <asm-nsid> nsid

  asm-arg: Arg-RawString-ASM(str) -> str

  asm-arg: str -> str
    where is-string

rules // asm-nsid :: NSID -> string

  asm-nsid: NSID(ns, name) -> <concat-strings> [ns, ":" | <intersperse(|"/")> name]
