module loc

imports

  signatures/llmc/-
  signatures/-

  asm
  common
  transfer
  transform
  type
  type-access

  // BUG: transitive from 'common', but included here because otherwise the eclipse editor complains
  str_common

/*
Improvements to be made:
- There are some constructs remaining from when variables on the stack were referenced explicitly.
  This is no longer the case, as this is handled in the desugar step.
  But, because of that, there are some simplification here and there that could be made.
  For example, the loc-is-data strategy is no longer really necessary.
*/

signature

  /** variable location specifier */
  sorts Loc
  constructors
    /** variable in the data storage, identified by the namespace with name and an access path */
    DataStorage : Type-LL * NSID * Path-LL -> Loc
    /** variable in the scoreboard, identified by the 'fake player' and 'objective' */
    Scoreboard : string * string -> Loc
    /** discard location, value not of interest */
    Discard : Loc

strategies // register-decl :: Decl-LL -> _

  register-decl =
    ?Decl-LL(scope, _, name, t, loc)
  ; loc' := <register-decl-loc(|t)> loc
  ; rules(VarLoc: name -> loc')

  register-decl-loc(|t): StorageLocationData-LL(nsid, path) -> DataStorage(t, <transform-nsid> nsid, path)
  register-decl-loc(|_): StorageLocationScoreboard-LL(player, objective) -> Scoreboard(player, objective)

rules // loc-type :: Loc -> Type-LL

  loc-type: DataStorage(t, _, _) -> t
  loc-type: Scoreboard(_, _) -> TypeIntI-LL()

rules // loc-access-path :: (Loc, Path-LL) -> Loc

  loc-access-path(|loc): Path-LL([]) -> loc
  loc-access-path(|DataStorage(t, nsid, path)): path_access -> DataStorage(t', nsid, <path-join> [path, path_access])
    with
      t' := <type-access-path(|path_access)> t
  loc-access-path(|Scoreboard(_, _)): Path-LL([_|_]) -> <with(fail)>
  loc-access-path(|Discard()): _ -> Discard()

strategies // loc-is-data :: Loc

  loc-is-data =
    ?DataStorage(_, _, _)

strategies // is-locatable :: Arg-LL

  is-locatable = where(arg-to-loc)

rules // dest-to-loc :: AssignDest-LL -> Loc

  dest-to-loc: DestDiscard-LL() -> Discard()
  dest-to-loc: DestVar-LL(var) -> <VarLoc> var
  dest-to-loc: DestVarPath-LL(var, path) -> final_loc
    with
      var_loc := <VarLoc> var
    ; final_loc := <loc-access-path(|var_loc)> path

rules // arg-to-loc :: Arg-LL -> Loc

  arg-to-loc: ArgVar-LL(var) -> <VarLoc> var

rules // loc-args-data :: Loc -> List(Arg-ASM)

  loc-args-data: DataStorage(_, nsid, access_path) ->
    [
      Arg-RawString-ASM("storage"),
      Arg-NSID-ASM(nsid),
      <transform-path> access_path
    ]

  loc-args-data: loc@Scoreboard(_, _) -> loc'*
    with
      loc' := <loc-new-stack(|"$sb_access")>
    ; loc'* := <loc-args-data> loc'
    ; cmd_transfer := <transfer-loc(|loc')> loc
    ; rules(EmitCommand-Pre:+ _ -> cmd_transfer)

rules // loc-args-scoreboard :: Loc -> List(Arg-ASM)

  loc-args-scoreboard: <loc-is-data => loc> -> loc'*
    with
      loc' := <loc-new-scoreboard>
    ; loc'* := <loc-args-scoreboard> loc'
    ; cmd_transfer := <transfer-loc(|loc')> loc
    ; rules(EmitCommand-Pre:+ _ -> cmd_transfer)

  loc-args-scoreboard: Scoreboard(player, objective) ->
    [
      Arg-RawString-ASM(player),
      Arg-RawString-ASM(objective)
    ]

rules // loc-args-execute :: Loc -> List(Arg-ASM)

  loc-args-execute--is-data-compat =
    ?DataStorage(_, _, _)

  loc-args-execute =
    loc-args-execute--is-data-compat
  ; with(
      switch loc-type
        case ?TypeIntB-LL(): !"byte"
        case ?TypeIntS-LL(): !"short"
        case ?TypeIntI-LL(): !"int"
        case ?TypeIntL-LL(): !"long"
        case ?TypeFloatS-LL(): !"short"
        case ?TypeFloatD-LL(): !"double"
      end => t'
    )
  ; loc-args-data
    // append dest type indicator, required for NBT
  ; ![<id>, [
      Arg-RawString-ASM(t'),
      Arg-RawString-ASM("1")
    ]]
  ; concat

  loc-args-execute: Scoreboard(player, objective) ->
    [
       Arg-RawString-ASM("score"),
       Arg-RawString-ASM(player),
       Arg-RawString-ASM(objective)
    ]

rules // loc-get :: Loc -> Command-ASM

  loc-get: <loc-is-data => src> ->
    Command-Plain-ASM(
      "data",
      [
        Arg-RawString-ASM("get"),
        src_args*
      ]
    )
    with
      src_args* := <loc-args-data> src

  loc-get: src@Scoreboard(_, _) ->
    Command-Plain-ASM(
      "scoreboard",
      [
        Arg-RawString-ASM("players"),
        Arg-RawString-ASM("get"),
        src_args*
      ]
    )
    with
      src_args* := <loc-args-scoreboard> src

  loc-get: Discard() -> <with(fail)>

strategies

  /** create a unique stack reference for the given basename */
  loc-new-stack(|basename) =
    !DataStorage(
      TypeUnk-LL(),
      NSID("gzb.__temp__", ["_internal"]),
      Path-LL([
        Select-LL(<string-denorm> "_stack"),
        IndexFix-LL("-1"),
        Select-LL(<newname; string-denorm> basename)
      ])
    )

  /** create a new and unique Loc instance which is Scoreboard */
  loc-new-scoreboard =
    !Scoreboard(<newname> "uuidv4_TODO", "gzb")
