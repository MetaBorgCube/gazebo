module loc

imports

  signatures/llmc/-
  signatures/-

  common
  transfer
  transform

  // BUG: transitive from 'common', but included here because otherwise the eclipse editor complains
  str_common

signature

  /** variable location specifier */
  sorts Loc
  constructors
    /** variable on the local stack, including an optional access path */
    StackKey : string * Path-LL -> Loc
    /** variable in the data storage, identified by the namespace with name and an access path */
    DataStorage : NSID * Path-LL -> Loc
    /** variable in the scoreboard, identified by the 'fake player' and 'objective' */
    Scoreboard : string * string -> Loc
    /** discard location, value not of interest */
    Discard : Loc

strategies // register-decl :: Decl-LL -> _

  register-decl =
    ?Decl-LL(scope, mods, name, _, loc)
  ; loc' := <register-decl-loc(|name)> loc
  ; rules(VarLoc: name -> loc')

  register-decl-loc(|name): StorageLocationAuto-LL() -> StackKey(name, Path-LL([]))
  register-decl-loc(|_): StorageLocationData-LL(nsid, path) -> DataStorage(<transform-nsid> nsid, path)
  register-decl-loc(|_): StorageLocationScoreboard-LL(player, objective) -> Scoreboard(player, objective)

rules // loc-access-path :: (Loc, Path-LL) -> Loc

  loc-access-path(|loc): Path-LL([]) -> loc
  loc-access-path(|StackKey(key, path)): path_access -> StackKey(key, <path-join> [path, path_access])
  loc-access-path(|DataStorage(nsid, path)): path_access -> DataStorage(nsid, <path-join> [path, path_access])
  loc-access-path(|Scoreboard(_, _)): Path-LL([_|_]) -> <with(fail)>
  loc-access-path(|Discard()): _ -> Discard()

strategies // loc-is-data :: Loc

  loc-is-data =
    ?StackKey(_, _)
  + ?DataStorage(_, _)

strategies // is-locatable :: Arg-LL

  is-locatable = where(arg-to-loc)

rules // dest-to-loc :: AssignDest-LL -> Loc

  dest-to-loc: DestDiscard-LL() -> Discard()
  dest-to-loc: DestVar-LL(var) -> <VarLoc> var
  dest-to-loc: DestVarPath-LL(var, path) -> final_loc
    with
      var_loc := <VarLoc> var
    ; final_loc := <loc-access-path(|var_loc)> path

rules // arg-to-loc :: Arg-LL -> Loc

  arg-to-loc: ArgVar-LL(var) -> <VarLoc> var
  // TODO: ArgRef-LL

rules // loc-args-data :: Loc -> List(Arg-ASM)

  loc-args-data: StackKey(key, access_path) ->
    [
      Arg-RawString-ASM("storage"),
      Arg-NSID-ASM(NSID("gzb", ["_internal"])),
      <path-join; transform-path> [stack_select_path, access_path]
    ]
    with
      stack_select_path := Path-LL([
        Select-LL(<string-denorm> "_stack"),
        IndexFix-LL("-1"),
        Select-LL(<string-denorm> key)
      ])

  loc-args-data: DataStorage(nsid, access_path) ->
    [
      Arg-RawString-ASM("storage"),
      Arg-NSID-ASM(nsid),
      <transform-path> access_path
    ]

  loc-args-data: loc@Scoreboard(_, _) -> loc'*
    with
      new_key := <newname> "$sb_access"
    ; loc' := StackKey(new_key, Path-LL([]))
    ; loc'* := <loc-args-data> loc'
    ; cmd_transfer := <transfer-loc(|loc')> loc
    ; rules(EmitCommand-Pre:+ _ -> cmd_transfer)

rules // loc-args-scoreboard :: Loc -> List(Arg-ASM)

  loc-args-scoreboard: <loc-is-data => loc> -> loc'*
    with
      loc' := <loc-new-scoreboard>
    ; loc'* := <loc-args-scoreboard> loc'
    ; cmd_transfer := <transfer-loc(|loc')> loc
    ; rules(EmitCommand-Pre:+ _ -> cmd_transfer)

  loc-args-scoreboard: Scoreboard(player, objective) ->
    [
      Arg-RawString-ASM(player),
      Arg-RawString-ASM(objective)
    ]

rules // loc-args-execute :: Loc -> List(Arg-ASM)

  loc-args-execute--is-data-compat =
    ?StackKey(_, _)
  + ?DataStorage(_, _)

  loc-args-execute =
    loc-args-execute--is-data-compat
  ; loc-args-data

  loc-args-execute: Scoreboard(player, objective) ->
    [
       Arg-RawString-ASM("score"),
       Arg-RawString-ASM(player),
       Arg-RawString-ASM(objective)
    ]

rules // loc-get :: Loc -> Command-ASM

  loc-get: <loc-is-data => src> ->
    Command-Plain-ASM(
      "data",
      [
        Arg-RawString-ASM("get"),
        src_args*
      ]
    )
    with
      src_args* := <loc-args-data> src

  loc-get: src@Scoreboard(_, _) ->
    Command-Plain-ASM(
      "scoreboard",
      [
        Arg-RawString-ASM("players"),
        Arg-RawString-ASM("get"),
        src_args*
      ]
    )
    with
      src_args* := <loc-args-scoreboard> src

  loc-get: Discard() -> <with(fail)>

strategies

  /** create a new and unique Loc instance which is Scoreboard */
  loc-new-scoreboard =
    !Scoreboard(<newname> "uuidv4_TODO", "gzb")
