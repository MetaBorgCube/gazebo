module transfer

imports

  signatures/llmc/-
  signatures/-

  asm
  common
  loc
  type-ctype

  // BUG: transitive from 'common', but included here because otherwise the eclipse editor complains
  str_common

signature

  sorts TransferMode
  constructors
    TransferSet : TransferMode
    TransferAppend : TransferMode

/** Transfer a raw literal value to a Loc. */
rules // transfer-raw(|Loc, TransferMode?) :: string -> Command-ASM

  transfer-raw(|loc) = transfer-raw(|loc, TransferSet())

  transfer-raw(|<loc-is-data => loc>, mode): raw_string ->
    Command-Plain-ASM("data", [
      Arg-RawString-ASM("modify"),
      loc_args_data*,
      Arg-RawString-ASM(mode'),
      Arg-RawString-ASM("value"),
      Arg-RawString-ASM(raw_string)
    ])
    with
      loc_args_data* := <loc-args-data> loc
    ; mode' := <
        \TransferSet() -> "set"\
      + \TransferAppend() -> "append"\
      > mode

  transfer-raw(|loc@Scoreboard(_, _), TransferSet()): raw_string ->
    Command-Plain-ASM("scoreboard", [
      Arg-RawString-ASM("players"),
      Arg-RawString-ASM("set"),
      loc_args_sb*,
      Arg-RawString-ASM(raw_string)
    ])
    with
      loc_args_sb* := <loc-args-scoreboard> loc

  transfer-raw(|Discard(), _): _ -> Command-NoOp-ASM()

  // loc+mode combination not supported
  transfer-raw(|_, _) = with(fail)

/** Transfer the value of the source Loc to the given destination Loc. */
rules // transfer-loc(|Loc, TransferMode?) :: Loc -> Command-ASM

  transfer-loc(|dest) = transfer-loc(|dest, TransferSet())

  // _ <- ANY
  // highest matching prio
  transfer-loc(|Discard(), _): _ -> Command-NoOp-ASM()

  transfer-loc(|<loc-is-data => loc_dest>, mode): <loc-is-data => loc_src> ->
    Command-Plain-ASM("data", [
      Arg-RawString-ASM("modify"),
      loc_dest_args_data*,
      Arg-RawString-ASM(mode'),
      Arg-RawString-ASM("from"),
      loc_src_args_data*
    ])
    with
      <transfer-loc-type-compat> (loc_dest, loc_src)
    with
      loc_dest_args_data* := <loc-args-data> loc_dest
    ; loc_src_args_data* := <loc-args-data> loc_src
    ; mode' := <
        \TransferSet() -> "set"\
      + \TransferAppend() -> "append"\
      > mode

  transfer-loc(|loc_dest, TransferSet()): loc_src ->
    Command-Plain-ASM("execute", [
      Arg-RawString-ASM("store"),
      Arg-RawString-ASM("result"),
      loc_dest_args*,
      Arg-RedirectSelf-ASM([
        Arg-RawString-ASM("run"),
        Arg-Redirect-ASM(cmd_get)
      ])
    ])
    with
      <transfer-loc-type-compat> (loc_dest, loc_src)
    with
      loc_dest_args* := <loc-args-execute> loc_dest
    ; cmd_get := <loc-get> loc_src

  // loc+mode combination not supported
  transfer-loc(|_, _) = with(fail)

/** Check if the value from source location can be assigned to the destination location,
  * witout explicit coercion, such that the destination indeed has a value of its expected type.
  * This will check for implicit coercion, e.g. when assigning list/array to scoreboard. */
rules // transfer-loc-type-compat :: (dest:Loc, src:Loc) -> _

  // default policy: plainly compare the types
  transfer-loc-type-compat = where(
    (loc-type, loc-type)
  ; type-compat
  )

  // scoreboard altenative: list/array can be assigned, will be converted to int
  transfer-loc-type-compat = where(
    ?(
      Scoreboard(_, _)
    , <loc-type; (?TypeList-LL(_, _) + ?TypeArray-LL(_, _))>
    )
  )
