module common

imports

  signatures/llmc/-
  // BUG: this would have been sufficient (below), but transitive imports are not so great for source deps apparently
  signatures/-

  libspoofax/-

  str_common

signature

  sorts NSID
  constructors
    NSID : string * List(string) -> NSID

strategies

  pp-llmc = call-in-language(|"llmc", "pp-llmc-string")

strategies

  intersperse-concat(|sep) =
    with(all(not(is-list)))
  ; intersperse(|sep)
  ; concat-strings

strategies

  path-join =
    map(?Path-LL(<id>))
  ; concat
  ; !Path-LL(<id>)

strategies

  is-int-ll =
    ( ?ArgIntB-LL(v)
    + ?ArgIntS-LL(v)
    + ?ArgIntI-LL(v)
    + ?ArgIntL-LL(v)
    )
  ; !v

  is-float-ll =
    ( ?ArgFloatS-LL(v)
    + ?ArgFloatD-LL(v)
    )
  ; !v

  is-numeric-ll = is-int-ll + is-float-ll

  is-nbt-literal =
    ?ArgString-LL(_)
  + ?ArgIntB-LL(_)
  + ?ArgIntS-LL(_)
  + ?ArgIntI-LL(_)
  + ?ArgIntL-LL(_)
  + ?ArgFloatS-LL(_)
  + ?ArgFloatD-LL(_)
  + ArgList-LL(all(is-nbt-literal))
  + ArgArray-LL(all(is-nbt-literal))
  + ArgCompound-LL(all(CompoundEntry-LL(id, is-nbt-literal)))

  is-new-compatible =
    is-nbt-literal
  + ?ArgVar-LL(_)
  + ArgList-LL(all(is-new-compatible))
  + ArgArray-LL(all(is-new-compatible))
  + ArgCompound-LL(all(CompoundEntry-LL(id, is-new-compatible)))
  + ?ArgRaw-LL(_)
  + ?ArgUnsafe-LL(_)
  + ?ArgCond-LL(_)

  is-op-arith =
    ?OpAdd-LL()
  + ?OpSub-LL()
  + ?OpMul-LL()
  + ?OpDiv-LL()
  + ?OpMod-LL()
