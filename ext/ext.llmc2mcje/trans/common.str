module common

imports

  signatures/llmc/-
  // BUG: this would have been sufficient (below), but transitive imports are not so great for source deps apparently
  signatures/-

  pp/llmc-parenthesize
  pp/llmc-pp

  libspoofax/-

  libstratego-gpp

  str_common

signature

  sorts NSID
  constructors
    NSID : string * List(string) -> NSID

  sorts Unit-ASM Command-ASM Arg-ASM
  constructors
    /** base unit */
    Unit-ASM : List(Command-ASM) -> Unit-ASM
    /** plain command, without formatting */
    Command-Plain-ASM : string * List(Arg-ASM) -> Command-ASM
    /** call with GZB calling convention */
    Command-CallGzb-ASM : NSID * List(string) -> Command-ASM
    /** anonymous sub-unit (assembled in new function file x:y/z, expanded to 'function x:y/z') */
    Command-AnonSubUnit-ASM : Unit-ASM -> Command-ASM
    /** callable sub-unit (assembled similar to AnonSubUnit, but referenceable) */
    Command-CallableSubUnit-ASM : string * Unit-ASM -> Command-ASM
    /** call callable sub unit */
    Command-CallSubUnit-ASM : string -> Command-ASM
    /** no-op */
    Command-NoOp-ASM : Command-ASM
    /** command self-redirection (e.g. 'execute if abc' -> 'if xyz'), mainly used for execute chains */
    Arg-RedirectSelf-ASM : List(Arg-ASM) -> Arg-ASM
    /** general command redirection (e.g. 'execute ... run' -> 'say hi') */
    Arg-Redirect-ASM : Command-ASM -> Arg-ASM
    /** generic NSID arg */
    Arg-NSID-ASM : NSID -> Arg-ASM
    /** raw string part, anything allowed */
    Arg-RawString-ASM : string -> Arg-ASM

strategies

  pp-llmc =
      parenthesize-llmc
    ; prettyprint-llmc-start-symbols
    ; !V([], <id>)
    ; box2text-string(|120)

strategies

  intersperse-concat(|sep) =
    with(all(not(is-list)))
  ; intersperse(|sep)
  ; concat-strings

strategies

  path-join =
    map(?Path-LL(<id>))
  ; concat
  ; !Path-LL(<id>)

strategies

  is-int-ll =
    ( ?ArgIntB-LL(v)
    + ?ArgIntS-LL(v)
    + ?ArgIntI-LL(v)
    + ?ArgIntL-LL(v)
    )
  ; !v

  is-float-ll =
    ( ?ArgFloatS-LL(v)
    + ?ArgFloatD-LL(v)
    )
  ; !v

  is-numeric-ll = is-int-ll + is-float-ll

  is-nbt-literal =
    ?ArgString-LL(_)
  + ?ArgIntB-LL(_)
  + ?ArgIntS-LL(_)
  + ?ArgIntI-LL(_)
  + ?ArgIntL-LL(_)
  + ?ArgFloatS-LL(_)
  + ?ArgFloatD-LL(_)
  + ArgList-LL(all(is-nbt-literal))
  + ArgArray-LL(all(is-nbt-literal))
  + ArgCompound-LL(all(CompoundEntry-LL(id, is-nbt-literal)))

  is-new-compatible =
    is-nbt-literal
  + ?ArgVar-LL(_)
  + ArgList-LL(all(is-new-compatible))
  + ArgArray-LL(all(is-new-compatible))
  + ArgCompound-LL(all(CompoundEntry-LL(id, is-new-compatible)))
  + ?ArgRaw-LL(_)
  + ?ArgUnsafe-LL(_)
  + ?ArgCond-LL(_)

  is-op-arith =
    ?OpAdd-LL()
  + ?OpSub-LL()
  + ?OpMul-LL()
  + ?OpDiv-LL()
  + ?OpMod-LL()
