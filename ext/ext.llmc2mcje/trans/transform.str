module transform

imports

  signatures/llmc/-
  signatures/-

  asm
  asm-imp
  common
  loc
  transfer
  transform-make
  type-access
  type-literal

  // BUG: transitive from 'common', but included here because otherwise the eclipse editor complains
  str_common

strategies

  map-with-emitted-commands(s-trans) =
    map({| EmitCommand-Pre, EmitCommand-Post
      // workaround to enforce "empty" dr rhs set
      // see https://slde.slack.com/archives/C7254SF60/p1640029435083900
      : with(rules(EmitCommand-Pre:+ _ -> <fail>))
      ; with(rules(EmitCommand-Post:+ _ -> <fail>))
      ; s-trans
      ; ![<bagof-EmitCommand-Pre; reverse <+ ![]>(), [<id>], <bagof-EmitCommand-Post; reverse <+ ![]>()]
      ; concat
      |})
  ; flatten-list

  /** Enforce that a the command produced by 's' has all its pre and post emissions tightly clustered.
    * This should be used to guarantee command execution order if necessary. */
  command-force-cluster(s) =
    ![<id>]
  ; map-with-emitted-commands(s)
  ; !Command-AnonSubUnit-ASM(Unit-ASM(None(), <id>))

strategies // transform-function :: Function-LL -> Unit-ASM

  transform-function =
    ?Function-LL(name, tags, decls, Body-LL(body_block))
  ; {| VarLoc
    : <map(register-decl)> decls
    ; <transform-block> body_block
      // make sure there is an IMP header which contains the tag registrations
    ; with(
        // extract all tag identifiers
        tags' := <map(\TagRegistration-LL(tag_nsid) -> <transform-nsid> tag_nsid\)> tags
      )
    ; Unit-ASM(
        !Some(Header-IMP(
          <transform-nsid> name
          // no comments
        , []
        , [
            Handles-Annotation-IMP(tags')
          ]
        ))
      , id
      )
    |}

rules // transform-nsid :: NSID-LL -> NSID

  transform-nsid: NSID-LL(ns, name) -> NSID(ns, name)

rules // transform-block :: Block-LL -> Unit-ASM

  transform-block: FlowGroup-LL(flow_block*) -> Unit-ASM(None(), flow_block'*)
    with
      flow_block'* := <map-with-emitted-commands(transform-flow-block)> flow_block*
  transform-block: BasicBlock-LL(assign*) -> Unit-ASM(None(), assign'*)
    with
      assign'* := <map-with-emitted-commands(transform-assign)> assign*

rules // transform-flow-block :: FlowBlock-LL -> Command-ASM

  transform-flow-block: FlowBlock-LL(Unconditional-LL(), _, block) -> Command-AnonSubUnit-ASM(block')
    with
      block' := <transform-block> block

  /* recursive loop:
   * loop a = 1B { BODY }
   * -->
   * rec x { if a = 1B { BODY; x() } }
   */
  transform-flow-block: FlowBlock-LL(Loop-LL(ArgCond-LL(cond)), _, block) ->
    <transform-make-loop(
      !cond; transform-cond-exec
    , !block; transform-block
    )>

  transform-flow-block: FlowBlock-LL(If-LL(ArgCond-LL(cond)), _, block) ->
    Command-Plain-ASM("execute", [
      cond*,
      Arg-RedirectSelf-ASM([
        Arg-RawString-ASM("run"),
        Arg-Redirect-ASM(Command-AnonSubUnit-ASM(block'))
      ])
    ])
    with
      cond* := <transform-cond-exec> cond
    ; block' := <transform-block> block

  transform-flow-block: FlowBlock-LL(Execute-LL(fragments*), _, block) ->
    Command-Plain-ASM("execute", [
      args*
    ])
    with
      fragments'* := <map(transform-execfrag)> fragments*
    ; block' := <transform-block> block
    ; final_fragment := [
        Arg-RawString-ASM("run"),
        Arg-Redirect-ASM(Command-AnonSubUnit-ASM(block'))
      ]
    ; args* := <foldr(
        !final_fragment
      , \(frag*, prev) -> [frag*, Arg-RedirectSelf-ASM(prev)]\
      )> fragments'*

rules // transform-cond-exec :: BoolCond-LL -> List(Arg-ASM)

  // case: compare two nonliteral values
  transform-cond-exec: BoolCondCmp-LL(<is-locatable => lhs>, cmp, <is-locatable => rhs>) ->
    [
      Arg-RawString-ASM("if"),
      Arg-RawString-ASM("score"),
      lhs*,
      Arg-RawString-ASM(<
        \CmpLt-LL() -> "<"\
      + \CmpLte-LL() -> "<="\
      + \CmpEq-LL() -> "="\
      + \CmpGt-LL() -> ">"\
      + \CmpGte-LL() -> ">="\
      > cmp),
      rhs*
    ]
    with
      lhs* := <arg-to-loc; loc-args-scoreboard> lhs
    ; rhs* := <arg-to-loc; loc-args-scoreboard> rhs

  // case(overload): compare numeric value with scoreboard-compatible value
  transform-cond-exec: BoolCondCmp-LL(<not(is-locatable) => lhs>, cmp, <is-locatable => rhs>) ->
    <transform-cond-exec> BoolCondCmp-LL(rhs, cmp_inv, lhs)
    with
      cmp_inv := <
        \CmpLt-LL() -> CmpGt-LL()\
      + \CmpLte-LL() -> CmpGte-LL()\
      + \CmpEq-LL() -> CmpEq-LL()\
      + \CmpGt-LL() -> CmpLt-LL()\
      + \CmpGte-LL() -> CmpLte-LL()\
      > cmp

  // case: compare scoreboard-compatible lhs with numeric value
  transform-cond-exec: BoolCondCmp-LL(lhs, cmp, num) ->
    [
      Arg-RawString-ASM("if"),
      Arg-RawString-ASM("score"),
      lhs*,
      Arg-RawString-ASM("matches"),
      Arg-RawString-ASM(<concat-strings> [range_prefix, <int-to-string> v_int', range_suffix])
    ]
    where
      // TODO: warn about long
      !num; is-int-ll => v
    ; <is-locatable> lhs
    with
      lhs* := <arg-to-loc; loc-args-scoreboard> lhs
    with
      v_int := <string-to-int> v
    ; (range_prefix, range_suffix, v_int') := <
        \CmpLt-LL() -> ("..", "", <subti> (v_int, 1))\
      + \CmpLte-LL() -> ("..", "", v_int)\
      + \CmpEq-LL() -> ("", "", v_int)\
      + \CmpGt-LL() -> ("", "..", <addi> (v_int, 1))\
      + \CmpGte-LL() -> ("", "..", v_int)\
      > cmp

  // case: compare two numeric values
  // TODO: move this to separate phase
  transform-cond-exec: BoolCondCmp-LL(lhs, cmp, rhs) -> args
    where
      !lhs; is-numeric-ll => lhs_v
    ; !rhs; is-numeric-ll => rhs_v
    with
      [lhs_v_num, rhs_v_num] := <map(string-to-int <+ string-to-real)> [lhs_v, rhs_v]
    ; if <eval-cmp-numeric(|cmp)> (lhs_v_num, rhs_v_num) then
        // true emulation, no args mean it always flows through
        args := []
      else
        // false emulation
        args := [
          Arg-RawString-ASM("unless"),
          Arg-RawString-ASM("entity"),
          Arg-RawString-ASM("@e")
        ]
      end
  eval-cmp-numeric(|CmpLt-LL()) = lt
  eval-cmp-numeric(|CmpLte-LL()) = leq
  eval-cmp-numeric(|CmpEq-LL()) = eq
  eval-cmp-numeric(|CmpGt-LL()) = gt
  eval-cmp-numeric(|CmpGte-LL()) = geq

rules // transform-execfrag :: Exec-LL -> List(Arg-ASM)

  transform-execfrag =
    transform-execfrag-
  ; ?(action, rest*)
  ; ![Arg-RawString-ASM(action), rest*]

  transform-execfrag-: ExecAlign-LL(ArgString-LL(alignment)) ->
    (
      "align",
      [Arg-RawString-ASM(alignment)]
    )
    // TODO: validate alignment value is proper (e.g. "x", "yz", etc.)
  transform-execfrag-: ExecAnchored-LL(anchor) ->
    (
      "anchored",
      [<transform-anchor> anchor]
    )
  transform-execfrag-: ExecAs-LL(ArgSelector-LL(sel)) ->
    (
      "as",
      [<transform-selector> sel]
    )
  transform-execfrag-: ExecAt-LL(ArgSelector-LL(sel)) ->
    (
      "at",
      [<transform-selector> sel]
    )
  transform-execfrag-: ExecFacingPos-LL(pos) ->
    (
      "facing",
      [Arg-RawString-ASM(<transform-litarg-pos> pos)]
    )
  transform-execfrag-: ExecFacingEntity-LL(ArgSelector-LL(sel), anchor) ->
    (
      "facing entity",
      [
        <transform-selector> sel,
        <transform-anchor> anchor
      ]
    )
  transform-execfrag-: ExecIn-LL(ArgRes-LL(_, dim, _)) ->
    (
      "in",
      [<transform-nsid> dim]
    )
    // TODO: validate registry
  transform-execfrag-: ExecPositionedPos-LL(pos) ->
    (
      "positioned",
      [Arg-RawString-ASM(<transform-litarg-pos> pos)]
    )
  transform-execfrag-: ExecPositionedAs-LL(ArgSelector-LL(sel)) ->
    (
      "positioned as",
      [<transform-selector> sel]
    )
  transform-execfrag-: ExecRotated-LL(rotation) ->
    (
      "rotated",
      [<transform-rotation> rotation]
    )
  transform-execfrag-: ExecRotatedAs-LL(ArgSelector-LL(sel)) ->
    (
      "rotated as",
      [<transform-selector> sel]
    )

rules // transform-anchor :: Anchor-LL -> Arg-ASM

  transform-anchor: AnchorEyes-LL() -> Arg-RawString-ASM("eyes")
  transform-anchor: AnchorFeet-LL() -> Arg-RawString-ASM("feet")

rules // transform-rotation :: Rotation-LL -> Arg-ASM

  transform-rotation =
    ?Rotation-LL(yaw_kind, yaw, pitch_kind, pitch)
  ; ![(yaw_kind, yaw), (pitch_kind, pitch)]
  ; all(
      \(RotationKindAbs-LL(), value) -> <transform-litarg-rawnumber> value\
    + \(RotationKindRel-LL(), value) -> <concat-strings> ["~", <transform-litarg-rawnumber> value]\
    )
  ; intersperse-concat(|" ")
  ; !Arg-RawString-ASM(<id>)

rules // transform-litarg-rawnumber :: Arg-LL.{ArgInt*-LL, ArgFloat*-LL} -> string

  transform-litarg-rawnumber: ArgIntB-LL(v) -> v
  transform-litarg-rawnumber: ArgIntS-LL(v) -> v
  transform-litarg-rawnumber: ArgIntI-LL(v) -> v
  transform-litarg-rawnumber: ArgIntL-LL(v) -> v
  transform-litarg-rawnumber: ArgFloatS-LL(v) -> v
  transform-litarg-rawnumber: ArgFloatD-LL(v) -> v

rules // transform-litarg-pos :: Arg-LL.ArgPos-LL -> string

  transform-litarg-pos =
    ?ArgPos-LL(kind, x_kind, x, y_kind, y, z_kind, z)
  ; ![(x_kind, x), (y_kind, y), (z_kind, z)]
  ; with(
      switch !kind
        case ?PosAbs-LL(): !""
        case ?PosLoc-LL(): !"^"
        case ?PosRel-LL(): !"~"
      end => dyn_prefix
    )
  ; all(
      \(PosCoordAbs-LL(), coord) -> <transform-litarg-rawnumber> coord\
    + \(PosCoordDyn-LL(), coord) -> <concat-strings> [dyn_prefix, <transform-litarg-rawnumber> coord]\
    )
  ; intersperse-concat(|" ")

rules // transform-assign :: Assign-LL -> Command-ASM

  transform-assign: AssignOp-LL(dest, op, arg*) -> res
    with
      dest_loc := <dest-to-loc> dest
    ; res := <command-force-cluster(transform-assign-op(|dest_loc))> (op, arg*)

  transform-assign: AssignNew-LL(DestDiscard-LL(), _) -> Command-NoOp-ASM()

  transform-assign: AssignNew-LL(dest, arg) -> <assign-arg-to-loc(|dest_loc)> arg
    with
      dest_loc := <dest-to-loc> dest

  transform-assign: _ -> <fail>
    with
      err(|"Assign not recognized, is partial evaluation OK?")

rules // transform-assign-op(|Loc) :: (Op-LL, List(Arg-LL)) -> Command-ASM

  transform-assign-op(|dest): (<is-op-arith => op>, [lhs, rhs]) ->
    <transfer-loc(|dest)> interm_result
    with
      interm_result := Scoreboard("arith_a", "gzb")
    ; interm_lit := Scoreboard("arith_b", "gzb")
    ; interm_result_args* := <loc-args-scoreboard> interm_result
    ; interm_lit_args* := <loc-args-scoreboard> interm_lit
    with
      op_arg := <
        \OpAdd-LL() -> "+="\
      + \OpSub-LL() -> "-="\
      + \OpMul-LL() -> "*="\
      + \OpDiv-LL() -> "/="\
      + \OpMod-LL() -> "%="\
      > op
    with
      transfer_lhs_to_interm_result := <command-force-cluster(assign-arg-to-loc(|interm_result))> lhs
    ; rules(EmitCommand-Pre:+ _ -> transfer_lhs_to_interm_result)
    ; transfer_rhs_to_interm_lit := <command-force-cluster(assign-arg-to-loc(|interm_lit))> rhs
    ; rules(EmitCommand-Pre:+ _ -> transfer_rhs_to_interm_lit)
    ; rules(EmitCommand-Pre:+ _ -> Command-Plain-ASM(
        "scoreboard",
        [
          Arg-RawString-ASM("players"),
          Arg-RawString-ASM("operation"),
          interm_result_args*,
          Arg-RawString-ASM(op_arg),
          interm_lit_args*
        ]
      ))

  // count entities matching a selector
  transform-assign-op(|dest): (OpCountElements-LL(), [ArgSelector-LL(sel)]) -> res
    with
      loc_counter := <loc-new-scoreboard>
    ; loc_counter_args_sb* := <loc-args-scoreboard> loc_counter
    with
      init_counter := <transfer-raw(|loc_counter)> "0"
    ; rules(EmitCommand-Pre:+ _ -> init_counter)
    with
      do_count := Command-Plain-ASM("execute", [
        Arg-RawString-ASM("as"),
        <transform-selector> sel,
        Arg-RedirectSelf-ASM([
          Arg-RawString-ASM("run"),
          Arg-Redirect-ASM(Command-Plain-ASM("scoreboard", [
            Arg-RawString-ASM("players"),
            Arg-RawString-ASM("add"),
            loc_counter_args_sb*,
            Arg-RawString-ASM("1")
          ]))
        ])
      ])
    ; rules(EmitCommand-Pre:+ _ -> do_count)
    with
      res := <transfer-loc(|dest)> loc_counter

  // count elements: if a list or array is moved into a scoreboard,
  // its length is stored instead of the actual values; this functions as a count/length operation
  transform-assign-op(|dest): (OpCountElements-LL(), [src]) -> res
    with
      loc_src := <arg-to-loc> src
   <+ err(|"Cannot count from immediate argument even though it might be iterable"); fail
    with
      if <?Scoreboard(_, _)> dest then
        // if already scoreboard desination, don't need to do anything; just transfer
        res := <transfer-loc(|dest)> loc_src
      else
        // if not yet a scoreboard destination, force the src to be transferred to a scoreboard ...
        loc_intermediate := <loc-new-scoreboard>
      ; transfer_to_loc_intermediate := <transfer-loc(|loc_intermediate)> loc_src
      ; rules(EmitCommand-Pre:+ _ -> transfer_to_loc_intermediate)
        // ... and then just transfer that to the actual destination
      ; res := <transfer-loc(|dest)> loc_intermediate
      end

  transform-assign-op(|dest): (OpFind-LL(), [src, ArgPath-LL(path)]) ->
    <transfer-loc(|dest)> loc_src'
    with
      loc_src := <arg-to-loc> src
    with
      loc_src' := <loc-access-path(|loc_src)> path

  // TODO: all other ops

  transform-assign-op(|dest): (OpInvoke-LL(t_ret), [ArgFunction-LL(fn), args*]) ->
    Command-AnonSubUnit-ASM(Unit-ASM(None(), [
      init_arg_area,
      arg_transfers*,
      Command-CallGzb-ASM(<transform-nsid> fn, <loc-args-data> arg_area)
    , transfer_ret_val
    ]))
    with
      arg_area_t := <extract-args-area-type> args*
    ; arg_area := <loc-new-stack(|"$args", arg_area_t)>
    ; init_arg_area := <transfer-raw(|arg_area)> "{}"
    ; arg_transfers* := <map(command-force-cluster({arg_dest: \ArgParam-LL(name, _, value) ->
        <assign-arg-to-loc(|arg_dest)> value
        with
          arg_dest := <loc-access-path(|arg_area)> Path-LL([Select-LL(<string-denorm> name)])
      \}))> args*
    ; transfer_ret_val := <loc-new-retval(|t_ret); transfer-loc(|dest)>

  transform-assign-op(|dest): (OpNew-LL(), []) ->
    <loc-type; type-literal-singleton; transfer-raw(|dest)> dest

  transform-assign-op(|dest): (OpNew-LL(), [size]) ->
    <type-literal-singleton; transfer-raw(|dest)> t
    with
      t := <loc-type> dest
    ; t_inner := <type-access-list_array> t
    ; loc_size := <loc-new-scoreboard>
    ; transfer_size := <assign-arg-to-loc(|loc_size)> size
    ; rules(EmitCommand-Pre:+ _ -> transfer_size)
    ; append_singletons_loop := <transform-make-loop(
        // condition
        { args_size*
        : args_size* := <loc-args-scoreboard> loc_size
        ; ![
            Arg-RawString-ASM("if"),
            Arg-RawString-ASM("score"),
            args_size*,
            Arg-RawString-ASM("matches"),
            Arg-RawString-ASM("1..")
          ]
        }
      , // body
        { args_size*
        : args_size* := <loc-args-scoreboard> loc_size
        ; !Unit-ASM(None(), [
            // append the new singleton value
            <type-literal-singleton; transfer-raw(|dest, TransferAppend())> t_inner,
            // decrement the remaining count by 1
            Command-Plain-ASM("scoreboard", [
              Arg-RawString-ASM("players"),
              Arg-RawString-ASM("remove"),
              args_size*,
              Arg-RawString-ASM("1")
            ])
          ])
        }
      )>
    ; rules(EmitCommand-Post:+ _ -> append_singletons_loop)

  transform-assign-op(|_): (op#(_), _) ->
    Command-Plain-ASM("say", [Arg-RawString-ASM(<concat-strings> ["TODO: assign ", op])])

rules // transform-assign-new-arg(|Loc) :: Arg-LL -> Optional(string)

  transform-assign-new-arg(|_): ArgString-LL(str) -> Some(str)
  transform-assign-new-arg(|_): ArgIntB-LL(int) -> Some(<concat-strings> [int, "b"])
  transform-assign-new-arg(|_): ArgIntS-LL(int) -> Some(<concat-strings> [int, "s"])
  transform-assign-new-arg(|_): ArgIntI-LL(int) -> Some(int)
  transform-assign-new-arg(|_): ArgIntL-LL(int) -> Some(<concat-strings> [int, "L"])
  transform-assign-new-arg(|_): ArgFloatS-LL(float) -> Some(<concat-strings> [float, "f"])
  transform-assign-new-arg(|_): ArgFloatD-LL(float) -> Some(<concat-strings> [float, "d"])

  transform-assign-new-arg(|loc): ArgList-LL(elems*) -> Some(<concat-strings> ["[", elems'*, "]"])
    with
      elems'* := <enumerate-map-intersperse({loc':
        with(loc' := <Fst; int-to-string; !Path-LL([IndexFix-LL(<id>)]); loc-access-path(|loc)>)
      ; Snd
      ; transform-assign-new-arg(|loc')
      ; opt-unwrap(!"0")
      })> elems*

  transform-assign-new-arg(|loc): ArgArray-LL(elems*) -> Some(<concat-strings> ["[", type_id, "; ", elems'*, "]"])
    with
      t := <loc-type; type-access-list_array> loc
    ; type_id := <
        \TypeIntI-LL() -> "I"\
      + \TypeIntL-LL() -> "L"\
      > t
    ; elems'* := <enumerate-map-intersperse({loc':
        with(loc' := <Fst; int-to-string; !Path-LL([IndexFix-LL(<id>)]); loc-access-path(|loc)>)
      ; Snd
      ; transform-assign-new-arg(|loc')
      ; opt-unwrap(!t; type-literal-placeholder)
      })> elems*

  transform-assign-new-arg(|loc): ArgCompound-LL(entries) -> Some(<concat-strings> ["{", entries'*, "}"])
    with
      entries'* := <
        map(
          // also don't need to denorm this key because it's already in denorm form
          {loc', value': \CompoundEntry-LL(key, value) ->
            [key, ": ", value']
            with
              loc' := <loc-access-path(|loc)> Path-LL([Select-LL(key)])
            ; value' := <
                transform-assign-new-arg(|loc')
                // safe to unwrap to string (or any arbitraty placeholder value),
                //  because the value will be overwritten in its entireity anyways
              ; opt-unwrap(!"$placeholder"; string-denorm)
              > value
          \}
        ; concat-strings
        )
      ; intersperse(|", ")
        > entries

  transform-assign-new-arg(|loc): locatable_arg -> None()
    where
      src_loc := <arg-to-loc> locatable_arg
    with
      transfer_cmd := <transfer-loc(|loc)> src_loc
    ; rules(EmitCommand-Post:+ _ -> transfer_cmd)

  transform-assign-new-arg(|_, _): ArgRaw-LL(_) -> None() // TODO: raw
  transform-assign-new-arg(|_, _): ArgUnsafe-LL(_) -> None() // TODO: unsafe
  transform-assign-new-arg(|_, _): ArgUnsafe-LL(_) -> None() // TODO: cond

rules // transform-path :: Path-LL -> Arg-ASM

  transform-path: Path-LL(elems) -> Arg-RawString-ASM(str)
    with
      str := <foldl(
        \(elem, "") -> <transform-path-fold(id)> elem\
     <+ \(elem, accum) -> <concat-strings> [accum, <transform-path-fold(fail)> elem]\
      )> (elems, "")

  // key is already in denorm form
  transform-path-fold(is-first): Select-LL(key) -> <concat-strings> [prefix, key]
    with
      if is-first then
        prefix := ""
      else
        prefix := "."
      end

  transform-path-fold(is-first): IndexFix-LL(idx) -> <concat-strings> ["[", idx, "]"]

  // TODO: Filter-LL

rules // transform-selector :: Selector-LL -> Arg-ASM

  transform-selector: Selector-LL(type, props*, _)
    -> Arg-RawString-ASM(<concat-strings> ["@", t, "[", props'*, "]"])
    with
      switch !type
        case ?SelectorE-LL(): !"e"
        case ?SelectorA-LL(): !"a"
        case ?SelectorP-LL(): !"p"
        case ?SelectorR-LL(): !"r"
        case ?SelectorS-LL(): !"s"
      end => t
    ; props'* := <map(transform-selector-prop); intersperse(|",")> props*

  transform-selector-prop: SelectorPropKv-LL(prop_kv) -> <transform-selector-prop-kv> prop_kv
  transform-selector-prop: SelectorPropMap-LL(k, v*) -> <concat-strings> [k, "={", v'*, "}"]
    with
      v'* := <map(transform-selector-prop-kv)> v*

  transform-selector-prop-kv: SelectorPropKvEqual-LL(k, v) -> <concat-strings> [k, "=", <transform-selector-prop-v> v]
  transform-selector-prop-kv: SelectorPropKvNotEqual-LL(k, v) -> <concat-strings> [k, "=!", <transform-selector-prop-v> v]

  /** string value conversion, only for specific supported args */
  transform-selector-prop-v: ArgString-LL(v) -> v
  transform-selector-prop-v: ArgIntB-LL(v) -> v
  transform-selector-prop-v: ArgIntS-LL(v) -> v
  transform-selector-prop-v: ArgIntI-LL(v) -> v
  transform-selector-prop-v: ArgIntL-LL(v) -> v
  transform-selector-prop-v: ArgFloatS-LL(v) -> v
  transform-selector-prop-v: ArgFloatD-LL(v) -> v
  transform-selector-prop-v: ArgRange-LL(lo, hi)
    -> <concat-strings> [<transform-selector-prop-v--range-part> lo, "..", <transform-selector-prop-v--range-part> hi]

  transform-selector-prop-v--range-part: RangePartNone-LL() -> ""
  transform-selector-prop-v--range-part: RangePartSome-LL(v) -> <transform-selector-prop-v> v

strategies // assign-arg-to-loc(|Loc) :: Arg-LL -> Command-ASM

  assign-arg-to-loc(|dest) =
    is-new-compatible
  ; transform-assign-new-arg(|dest)
    // transfer the initial value immediately if it is present
  ; opt-map(transfer-raw(|dest))
    // else simply do nothing, because the value will be filled in emitted post
  ; opt-unwrap(!Command-NoOp-ASM())

strategies // extract-args-area-type :: List(Arg-LL.ArgParam-LL) -> Type-LL

  extract-args-area-type =
    map(\ArgParam-LL(name, t, _) -> TypeCompoundEntry-LL(<string-denorm> name, t)\)
  ; !TypeCompound-LL(None(), <id>)
