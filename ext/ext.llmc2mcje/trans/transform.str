module transform

imports

  signatures/llmc/-
  signatures/-

  common
  loc
  transfer

  // BUG: transitive from 'common', but included here because otherwise the eclipse editor complains
  str_common

strategies

  map-with-emitted-commands(s-trans) =
    map({| EmitCommand-Pre, EmitCommand-Post
      // workaround to enforce "empty" dr rhs set
      // see https://slde.slack.com/archives/C7254SF60/p1640029435083900
      : with(rules(EmitCommand-Pre:+ _ -> <fail>))
      ; with(rules(EmitCommand-Post:+ _ -> <fail>))
      ; s-trans
      ; ![<bagof-EmitCommand-Pre; reverse <+ ![]>(), [<id>], <bagof-EmitCommand-Post; reverse <+ ![]>()]
      ; concat
      |})
  ; flatten-list

  /** Enforce that a the command produced by 's' has all its pre and post emissions tightly clustered.
    * This should be used to guarantee command execution order if necessary. */
  command-force-cluster(s) =
    ![<id>]
  ; map-with-emitted-commands(s)
  ; !Command-AnonSubUnit-ASM(Unit-ASM(<id>))

strategies // transform-function :: Function-LL -> Unit-ASM

  transform-function =
    ?Function-LL(_, decls, Body-LL(body_block))
  ; {| VarLoc
    : <map(register-decl)> decls
    ; <transform-block> body_block
    |}

rules // transform-nsid :: NSID-LL -> NSID

  transform-nsid: NSID-LL(ns, name) -> NSID(ns, name)

rules // transform-block :: Block-LL -> Unit-ASM

  transform-block: FlowGroup-LL(flow_block*) -> Unit-ASM(flow_block'*)
    with
      flow_block'* := <map-with-emitted-commands(transform-flow-block)> flow_block*
  transform-block: BasicBlock-LL(assign*) -> Unit-ASM(assign'*)
    with
      assign'* := <map-with-emitted-commands(transform-assign)> assign*

rules // transform-flow-block :: FlowBlock-LL -> Command-ASM

  transform-flow-block: FlowBlock-LL(Unconditional-LL(), _, block) -> Command-AnonSubUnit-ASM(block')
    with
      block' := <transform-block> block

  // TODO: loop

  transform-flow-block: FlowBlock-LL(If-LL(ArgCond-LL(cond)), _, block) ->
    Command-Plain-ASM("execute", [
      cond*,
      Arg-RedirectSelf-ASM([
        Arg-RawString-ASM("run"),
        Arg-Redirect-ASM(Command-AnonSubUnit-ASM(block'))
      ])
    ])
    with
      cond* := <transform-cond-exec> cond
    ; block' := <transform-block> block

rules // transform-cond-exec :: BoolCond-LL -> List(Arg-ASM)

  transform-cond-exec: BoolCondCmp-LL(<is-locatable => lhs>, cmp, <is-locatable => rhs>) ->
    [
      Arg-RawString-ASM("if"),
      Arg-RawString-ASM("score"),
      lhs*,
      Arg-RawString-ASM(<
        \CmpLt-LL() -> "<"\
      + \CmpLte-LL() -> "<="\
      + \CmpEq-LL() -> "="\
      + \CmpGt-LL() -> ">"\
      + \CmpGte-LL() -> ">="\
      > cmp),
      rhs*
    ]
    with
      lhs* := <arg-to-loc; loc-args-scoreboard> lhs
    ; rhs* := <arg-to-loc; loc-args-scoreboard> rhs

  // case(overload): compare numeric value with scoreboard-compatible value
  transform-cond-exec: BoolCondCmp-LL(<not(is-locatable) => lhs>, cmp, <is-locatable => rhs>) ->
    <transform-cond-exec> BoolCondCmp-LL(rhs, cmp_inv, lhs)
    with
      cmp_inv := <
        \CmpLt-LL() -> CmpGt-LL()\
      + \CmpLte-LL() -> CmpGte-LL()\
      + \CmpEq-LL() -> CmpEq-LL()\
      + \CmpGt-LL() -> CmpLt-LL()\
      + \CmpGte-LL() -> CmpLte-LL()\
      > cmp

  // case: compare scoreboard-compatible lhs with numeric value
  transform-cond-exec: BoolCondCmp-LL(lhs, cmp, num) ->
    [
      Arg-RawString-ASM("if"),
      Arg-RawString-ASM("score"),
      lhs*,
      Arg-RawString-ASM("matches"),
      Arg-RawString-ASM(<concat-strings> [range_prefix, <int-to-string> v_int', range_suffix])
    ]
    where
      // TODO: warn about long
      !num; is-int-ll => v
    ; <is-locatable> lhs
    with
      lhs* := <arg-to-loc; loc-args-scoreboard> lhs
    with
      v_int := <string-to-int> v
    ; (range_prefix, range_suffix, v_int') := <
        \CmpLt-LL() -> ("..", "", <subti> (v_int, 1))\
      + \CmpLte-LL() -> ("..", "", v_int)\
      + \CmpEq-LL() -> ("", "", v_int)\
      + \CmpGt-LL() -> ("", "..", <addi> (v_int, 1))\
      + \CmpGte-LL() -> ("", "..", v_int)\
      > cmp

  // case: compare two numeric values
  // TODO: move this to separate phase
  transform-cond-exec: BoolCondCmp-LL(lhs, cmp, rhs) -> args
    where
      !lhs; is-numeric-ll => lhs_v
    ; !rhs; is-numeric-ll => rhs_v
    with
      [lhs_v_num, rhs_v_num] := <map(string-to-int <+ string-to-real)> [lhs_v, rhs_v]
    ; if <eval-cmp-numeric(|cmp)> (lhs_v_num, rhs_v_num) then
        // true emulation, no args mean it always flows through
        args := []
      else
        // false emulation
        args := [
          Arg-RawString-ASM("unless"),
          Arg-RawString-ASM("entity"),
          Arg-RawString-ASM("@e")
        ]
      end
  eval-cmp-numeric(|CmpLt-LL()) = lt
  eval-cmp-numeric(|CmpLte-LL()) = leq
  eval-cmp-numeric(|CmpEq-LL()) = eq
  eval-cmp-numeric(|CmpGt-LL()) = gt
  eval-cmp-numeric(|CmpGte-LL()) = geq

rules // transform-assign :: Assign-LL -> Command-ASM

  transform-assign: AssignOp-LL(dest, op, arg*) -> res
    with
      dest_loc := <dest-to-loc> dest
    ; res := <command-force-cluster(transform-assign-op(|dest_loc))> (op, arg*)

  transform-assign: AssignNew-LL(DestDiscard-LL(), _) -> Command-NoOp-ASM()

  transform-assign: AssignNew-LL(dest, arg) -> <assign-arg-to-loc(|dest_loc)> arg
    with
      dest_loc := <dest-to-loc> dest

  transform-assign: _ -> <fail>
    with
      err(|"Assign not recognized, is partial evaluation OK?")

rules // transform-assign-op(|Loc) :: (Op-LL, List(Arg-LL)) -> Command-ASM

  // TODO: generalize over all arithmetic ops
  transform-assign-op(|dest): (OpAdd-LL(), [lhs, rhs]) ->
    <transfer-loc(|dest)> interm_result
    with
      interm_result := Scoreboard("arith_a", "gzb")
    ; interm_lit := Scoreboard("arith_b", "gzb")
    ; interm_result_args* := <loc-args-scoreboard> interm_result
    ; interm_lit_args* := <loc-args-scoreboard> interm_lit
    with
      transfer_lhs_to_interm_result := <command-force-cluster(assign-arg-to-loc(|interm_result))> lhs
    ; rules(EmitCommand-Pre:+ _ -> transfer_lhs_to_interm_result)
    ; transfer_rhs_to_interm_lit := <command-force-cluster(assign-arg-to-loc(|interm_lit))> rhs
    ; rules(EmitCommand-Pre:+ _ -> transfer_rhs_to_interm_lit)
    ; rules(EmitCommand-Pre:+ _ -> Command-Plain-ASM(
        "scoreboard",
        [
          Arg-RawString-ASM("players"),
          Arg-RawString-ASM("operation"),
          interm_result_args*,
          Arg-RawString-ASM("+="),
          interm_lit_args*
        ]
      ))

  // TODO: OpFind

  transform-assign-op(|dest): (OpFind-LL(), [src, ArgPath-LL(path)]) ->
    <transfer-loc(|dest)> loc_src'
    with
      loc_src := <arg-to-loc> src
    with
      loc_src' := <loc-access-path(|loc_src)> path

  // TODO: all other ops

  transform-assign-op(|_): (op#(_), _) ->
    Command-Plain-ASM("say", [Arg-RawString-ASM(<concat-strings> ["TODO: assign ", op])])

rules // transform-assign-new-arg(|Loc) :: Arg-LL -> Optional(string)

  transform-assign-new-arg(|_): ArgString-LL(str) -> Some(str)
  transform-assign-new-arg(|_): ArgIntB-LL(int) -> Some(<concat-strings> [int, "b"])
  transform-assign-new-arg(|_): ArgIntS-LL(int) -> Some(<concat-strings> [int, "s"])
  transform-assign-new-arg(|_): ArgIntI-LL(int) -> Some(int)
  transform-assign-new-arg(|_): ArgIntL-LL(int) -> Some(<concat-strings> [int, "L"])
  transform-assign-new-arg(|_): ArgFloatS-LL(float) -> Some(float)
  transform-assign-new-arg(|_): ArgFloatD-LL(float) -> Some(<concat-strings> [float, "d"])

  transform-assign-new-arg(|loc): ArgList-LL(elems*) -> Some(<concat-strings> ["[", elems'*, "]"])
    with
      elems'* := <enumerate-map-intersperse({loc':
        with(loc' := <Fst; int-to-string; !Path-LL([IndexFix-LL(<id>)]); loc-access-path(|loc)>)
      ; Snd
      ; transform-assign-new-arg(|loc')
      ; opt-unwrap(!"0")
      })> elems*

  transform-assign-new-arg(|loc): ArgArray-LL(elems*) -> Some(<concat-strings> ["[", type, "; ", elems'*, "]"])
    with
      type := "TODO_Array_Type"
    ; elems'* := <enumerate-map-intersperse({loc':
        with(loc' := <Fst; int-to-string; !Path-LL([IndexFix-LL(<id>)]); loc-access-path(|loc)>)
      ; Snd
      ; transform-assign-new-arg(|loc')
      ; opt-unwrap(!"0") // TODO: use correct placeholder based on array type
      })> elems*

  transform-assign-new-arg(|loc): ArgCompound-LL(entries) -> Some(<concat-strings> ["{", entries'*, "}"])
    with
      entries'* := <
        map(
          // also don't need to denorm this key because it's already in denorm form
          {loc': \CompoundEntry-LL(key, value) ->
            [key, ": ", <transform-assign-new-arg(|loc'); opt-unwrap(!"$placeholder"; string-denorm)> value]
            with
              loc' := <loc-access-path(|loc)> Path-LL([Select-LL(key)])
          \}
        ; concat-strings
        )
      ; intersperse(|", ")
        > entries

  transform-assign-new-arg(|loc): locatable_arg -> None()
    where
      src_loc := <arg-to-loc> locatable_arg
    with
      transfer_cmd := <transfer-loc(|loc)> src_loc
    ; rules(EmitCommand-Post:+ _ -> transfer_cmd)

  transform-assign-new-arg(|_, _): ArgRaw-LL(_) -> None() // TODO: raw
  transform-assign-new-arg(|_, _): ArgUnsafe-LL(_) -> None() // TODO: unsafe
  transform-assign-new-arg(|_, _): ArgUnsafe-LL(_) -> None() // TODO: cond

rules // transform-path :: Path-LL -> Arg-ASM

  transform-path: Path-LL(elems) -> Arg-RawString-ASM(str)
    with
      str := <foldl(
        \(elem, "") -> <transform-path-fold(id)> elem\
     <+ \(elem, accum) -> <concat-strings> [accum, <transform-path-fold(fail)> elem]\
      )> (elems, "")

  // key is already in denorm form
  transform-path-fold(is-first): Select-LL(key) -> <concat-strings> [prefix, key]
    with
      if is-first then
        prefix := ""
      else
        prefix := "."
      end

  transform-path-fold(is-first): IndexFix-LL(idx) -> <concat-strings> ["[", idx, "]"]

  // TODO: Filter-LL

rules // assign-arg-to-loc(|Loc) :: Arg-LL -> Command-ASM

  assign-arg-to-loc(|dest): <is-new-compatible => arg> ->
    <transfer-raw(|dest)> value
    with
      value := <transform-assign-new-arg(|dest); opt-unwrap(!"$placeholder"; string-denorm)> arg
